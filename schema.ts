/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  "/auth/register": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Register user */
    post: operations["register"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Login user */
    post: operations["login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/refresh-token": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh token */
    post: operations["refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Logout user */
    post: operations["logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/otp": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send OTP */
    post: operations["sendOTP"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/google/authorization-url": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["getAuthorizationUrl"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/google/callback": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Google callback */
    get: operations["googleCallback"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/forgot-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Forgot password */
    post: operations["forgotPassword"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/2fa/enable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Enable 2FA */
    post: operations["enable2fa"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/auth/2fa/disable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Disable 2FA */
    post: operations["disable2fa"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/languages": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of languages */
    get: operations["getLanguages"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/languages/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a language by ID */
    get: operations["getLanguageById"];
    /** Update a language */
    put: operations["updateLanguage"];
    post?: never;
    /** Delete a language */
    delete: operations["deleteLanguage"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/languages/create": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create a new language */
    post: operations["createLanguage"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/permissions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of permissions */
    get: operations["getPermissions"];
    put?: never;
    /** Create a new permission */
    post: operations["createPermission"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/permissions/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a permission by ID */
    get: operations["getPermissionById"];
    /** Update a permission */
    put: operations["updatePermission"];
    post?: never;
    /** Delete a permission */
    delete: operations["deletePermission"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/roles": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of roles */
    get: operations["getRoles"];
    put?: never;
    /** Create a new role */
    post: operations["createRole"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/roles/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a role by ID */
    get: operations["getRoleById"];
    /** Update an existing role */
    put: operations["updateRole"];
    post?: never;
    /** Delete a role */
    delete: operations["deleteRole"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get current user profile. */
    get: operations["getProfile"];
    /** Update current user profile. */
    put: operations["updateProfile"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/profile/change-password": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Change current user password. */
    put: operations["changePassword"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of users */
    get: operations["getUsers"];
    put?: never;
    /** Create a new user. */
    post: operations["createUser"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a user by ID */
    get: operations["getUserById"];
    /** Update an existing user. */
    put: operations["updateUser"];
    post?: never;
    /** Delete a user by ID */
    delete: operations["deleteUser"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/media/upload/image": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload a large image from disk */
    post: operations["uploadLargeImageFromDisk"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/media/upload/array-of-images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload multiple images from buffer */
    post: operations["uploadArrayOfImages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/media/upload/multiple-images": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Upload multiple images from buffer */
    post: operations["uploadMultipleImages"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/media/presigned-url": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get presigned URL for uploading/downloading files */
    get: operations["getPresignedUrl"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/media/delete": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a file from S3 */
    delete: operations["deleteMedia"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of brands */
    get: operations["getBrands"];
    put?: never;
    /** Create a new brand */
    post: operations["createBrand"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brands/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a brand by ID */
    get: operations["getBrandById"];
    put: operations["updateBrand"];
    post?: never;
    delete: operations["deleteBrand"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brand-translations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of brand translations */
    get: operations["getBrandTranslations"];
    put?: never;
    /** Create a new brand translation */
    post: operations["createBrandTranslation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/brand-translations/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a brand translation by ID */
    get: operations["getBrandTranslationById"];
    /** Update a brand translation */
    put: operations["updateBrandTranslation"];
    post?: never;
    /** Delete a brand translation */
    delete: operations["deleteBrandTranslation"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/categories": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all categories */
    get: operations["getAllCategories"];
    put?: never;
    /** Create a new category */
    post: operations["createCategory"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/categories/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get category by ID */
    get: operations["getCategoryById"];
    /** Update an existing category */
    put: operations["updateCategory"];
    post?: never;
    /** Delete a category */
    delete: operations["deleteCategory"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/category-translations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of category translations */
    get: operations["getCategoryTranslations"];
    put?: never;
    /** Create a new category translation */
    post: operations["createCategoryTranslation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/category-translations/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a category translation by ID */
    get: operations["getCategoryTranslationById"];
    /** Update an existing category translation */
    put: operations["updateCategoryTranslation"];
    post?: never;
    /** Delete a category translation */
    delete: operations["deleteCategoryTranslation"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of products */
    get: operations["getProducts"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/products/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get product by ID */
    get: operations["getProductById"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/manage-product/products": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of products */
    get: operations["getManageProducts"];
    put?: never;
    /** Create a new product */
    post: operations["createProduct"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/manage-product/products/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get product by ID */
    get: operations["getManageProductById"];
    /** Update product by ID */
    put: operations["updateProduct"];
    post?: never;
    /** Delete product by ID */
    delete: operations["deleteProduct"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/product-translations": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of product translations */
    get: operations["getProductTranslations"];
    put?: never;
    /** Create a new product translation */
    post: operations["createProductTranslation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/product-translations/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a product translation by ID */
    get: operations["getProductTranslationById"];
    /** Update a product translation */
    put: operations["updateProductTranslation"];
    post?: never;
    /** Delete a product translation */
    delete: operations["deleteProductTranslation"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = Record<string, never>;
export type components = {
  schemas: {
    RegisterRequestDto: {
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's password
       * @example securePassword123
       */
      password: string;
      /**
       * @description Confirm password
       * @example securePassword123
       */
      confirmPassword: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar?: string;
      /**
       * @description Verification code
       * @example 123456
       */
      code: string;
    };
    RegisterResponseDto: {
      /**
       * Format: uuid
       * @description The user's ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * Format: date-time
       * @description The user's created date
       * @example 2023-10-27T00:00:00.000Z
       */
      createdAt: string;
      /**
       * @description The user's status
       * @example ACTIVE
       * @enum {string}
       */
      status: "ACTIVE" | "INACTIVE" | "BLOCKED";
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar: string | null;
      /**
       * Format: date-time
       * @description The user's updated date
       * @example 2023-10-27T00:00:00.000Z
       */
      updatedAt: string;
    };
    LoginRequestDto: {
      /**
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's password
       * @example securePassword123
       */
      password: string;
      /**
       * @description The user's TOTP code (if 2FA is enabled)
       * @example 123456
       */
      totpCode?: string;
      /**
       * @description The user's verification code (if 2FA is enabled)
       * @example 123456
       */
      code?: string;
    };
    LoginResponseDto: {
      /**
       * @description The access token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      accessToken: string;
      /**
       * @description The refresh token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
       */
      refreshToken: string;
    };
    RefreshTokenRequestDto: {
      /**
       * @description The refresh token used to obtain new access and refresh tokens
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      refreshToken: string;
    };
    RefreshTokenResponseDto: {
      /**
       * @description The new access token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      accessToken: string;
      /**
       * @description The new refresh token
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      refreshToken: string;
    };
    LogoutRequestDto: {
      /**
       * @description The refresh token to invalidate
       * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
       */
      refreshToken: string;
    };
    LogoutResponseDto: {
      /**
       * @description Message indicating the success of the logout operation
       * @example Logout successfully.
       */
      message: string;
    };
    SendOTPRequestDto: {
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The type of verification code being requested
       * @example REGISTER
       * @enum {string}
       */
      type: "REGISTER" | "FORGOT_PASSWORD" | "LOGIN" | "DISABLE_2FA";
    };
    SendOTPResponseDto: {
      /**
       * @description The generated OTP code
       * @example 123456
       */
      code: string;
      /**
       * Format: date-time
       * @description The creation timestamp of the OTP code
       * @example 2023-10-27T00:00:00.000Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @description The expiration timestamp of the OTP code
       * @example 2023-10-27T00:05:00.000Z
       */
      expiresAt: string;
    };
    ForgotPasswordRequestDto: {
      /**
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The new password for the user
       * @example newSecurePassword123
       */
      password: string;
      /**
       * @description Confirm the new password
       * @example newSecurePassword123
       */
      confirmPassword: string;
      /**
       * @description The verification code sent to the user's email
       * @example 123456
       */
      code: string;
    };
    ForgotPasswordResponseDto: {
      /**
       * @description Message indicating the success of the password update
       * @example Password has been updated.
       */
      message: string;
    };
    EnableTwoFactorAuthenticationResponseDto: {
      /**
       * @description The secret key for 2FA setup
       * @example JBSWY3DPEHPK3PXP
       */
      secret: string;
      /**
       * @description The URI for 2FA setup
       * @example otpauth://totp/Example:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=Example
       */
      uri: string;
    };
    Disable2faRequestDto: {
      /**
       * @description The user's TOTP code (if 2FA is enabled)
       * @example 123456
       */
      totpCode?: string;
      /**
       * @description The user's verification code (if 2FA is enabled)
       * @example 123456
       */
      code?: string;
    };
    Disable2faResponseDto: {
      /**
       * @description Message indicating the success of disabling 2FA
       * @example 2FA has been disabled.
       */
      message: string;
    };
    PaginationResponseDto: {
      /**
       * @description Total number of pages
       * @example 5
       */
      totalPages: number;
      /**
       * @description Total number of items
       * @example 100
       */
      totalItems: number;
      /**
       * @description Number of items per page
       * @example 20
       */
      pageSize: number;
      /**
       * @description Current page index (starts from 0)
       * @example 0
       */
      pageIndex: number;
    };
    PageDto: {
      pagination: components["schemas"]["PaginationResponseDto"];
    };
    LanguageResponseDto: {
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      id: string;
      /**
       * @description Language name
       * @example English
       */
      name: string;
    };
    LanguageCreateRequestDto: {
      /**
       * @description Language name
       * @example English
       */
      name: string;
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      id: string;
    };
    LanguageCreateResponseDto: {
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      id: string;
      /**
       * @description Language name
       * @example English
       */
      name: string;
    };
    LanguageUpdateRequestDto: {
      /**
       * @description Language name
       * @example Vietnamese
       */
      name: string;
    };
    LanguageUpdateResponseDto: {
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      id: string;
      /**
       * @description Language name
       * @example English
       */
      name: string;
    };
    LanguageDeleteResponseDto: {
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      id: string;
      /**
       * @description Language name
       * @example English
       */
      name: string;
    };
    RoleResponseDto: {
      /**
       * @description Role ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Role name
       * @example Admin
       */
      name: string;
      /**
       * @description Is role active
       * @example true
       */
      isActive: boolean;
      /**
       * @description Role description
       * @example Administrator role
       */
      description?: string;
    };
    PermissionWithRolesResponseDto: {
      /**
       * @description Permission ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Permission name
       * @example Create User
       */
      name: string;
      /**
       * @description Permission description
       * @example Allows creating new users
       */
      description?: string;
      /**
       * @description Permission path
       * @example /users
       */
      path: string;
      /**
       * @description Permission method
       * @example POST
       */
      method: string;
      /**
       * @description Permission module
       * @example USER
       */
      module: string;
      /**
       * @description Roles associated with the permission
       * @example [
       *       {
       *         "id": "123e4567-e89b-12d3-a456-426614174000",
       *         "name": "Admin",
       *         "description": "Administrator role"
       *       }
       *     ]
       */
      roles?: components["schemas"]["RoleResponseDto"][];
    };
    CreatePermissionRequestDto: {
      /**
       * @description Permission name
       * @example Create User
       */
      name: string;
      /**
       * @description Permission description
       * @example Allows creating new users
       */
      description?: string;
      /**
       * @description Permission path
       * @example /users
       */
      path: string;
      /**
       * @description Permission method
       * @example POST
       * @enum {string}
       */
      method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
      /**
       * @description Roles associated with the permission
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "223e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      rolesIds: string[];
    };
    UpdatePermissionRequestDto: {
      /**
       * @description Permission name
       * @example Create User
       */
      name: string;
      /**
       * @description Permission description
       * @example Allows creating new users
       */
      description?: string;
      /**
       * @description Permission path
       * @example /users
       */
      path: string;
      /**
       * @description Permission method
       * @example POST
       * @enum {string}
       */
      method: "GET" | "POST" | "PUT" | "DELETE" | "PATCH";
      /**
       * @description Roles associated with the permission
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "223e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      rolesIds: string[];
    };
    DeletePermissionRequestDto: {
      /**
       * @description Whether to hard delete the permission
       * @default false
       * @example false
       */
      isHardDelete: boolean;
    };
    PermissionResponseDto: {
      /**
       * @description Permission ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Permission name
       * @example Create User
       */
      name: string;
      /**
       * @description Permission description
       * @example Allows creating new users
       */
      description?: string;
      /**
       * @description Permission path
       * @example /users
       */
      path: string;
      /**
       * @description Permission method
       * @example POST
       */
      method: string;
      /**
       * @description Permission module
       * @example USER
       */
      module: string;
    };
    RoleWithPermissionsResponseDto: {
      /**
       * @description Role ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Role name
       * @example Admin
       */
      name: string;
      /**
       * @description Is role active
       * @example true
       */
      isActive: boolean;
      /**
       * @description Role description
       * @example Administrator role
       */
      description?: string;
      /**
       * @description Permissions associated with the role
       * @example [
       *       {
       *         "id": "123e4567-e89b-12d3-a456-426614174000",
       *         "name": "Login",
       *         "description": "Allows user to log in",
       *         "path": "/login",
       *         "method": "POST"
       *       }
       *     ]
       */
      permissions: components["schemas"]["PermissionResponseDto"][];
    };
    CreateRoleRequestDto: {
      /**
       * @description Role name
       * @example Admin
       */
      name: string;
      /**
       * @description Role description
       * @example Administrator role
       */
      description?: string;
      /**
       * @description Is role active
       * @example true
       */
      isActive?: boolean;
      /**
       * @description Permissions
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "223e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      permissionIds?: string[];
    };
    UpdateRoleRequestDto: {
      /**
       * @description Role name
       * @example Admin
       */
      name: string;
      /**
       * @description Role description
       * @example Administrator role
       */
      description?: string;
      /**
       * @description Is role active
       * @example true
       */
      isActive?: boolean;
      /**
       * @description Permissions
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "223e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      permissionIds?: string[];
    };
    DeleteRoleRequestDto: {
      /**
       * @description Is hard delete
       * @example true
       */
      isHardDelete?: boolean;
    };
    /**
     * @description The user's status
     * @enum {string}
     */
    UserStatus: "ACTIVE" | "INACTIVE" | "BLOCKED";
    ProfileResponseDto: {
      /**
       * Format: uuid
       * @description The user's ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar: string | null;
      /**
       * @description The user's status
       * @example ACTIVE
       */
      status: components["schemas"]["UserStatus"];
      /** @description User's role with associated permissions */
      role: components["schemas"]["RoleWithPermissionsResponseDto"];
    };
    UpdateProfileRequestDto: {
      /**
       * @description User's full name
       * @example John Doe
       */
      name?: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber?: string;
      /**
       * @description User status
       * @example ACTIVE
       */
      status?: components["schemas"]["UserStatus"];
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar?: string;
      /**
       * Format: uuid
       * @description Role ID to assign to the user
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      roleId?: string;
    };
    UpdateProfileResponseDto: {
      /**
       * Format: uuid
       * @description The user's ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar: string | null;
      /**
       * @description The user's status
       * @example ACTIVE
       */
      status: components["schemas"]["UserStatus"];
      /** @description The user's role with associated permissions */
      role: components["schemas"]["RoleResponseDto"];
      /**
       * Format: date-time
       * @description The user's updated date
       * @example 2025-05-11T00:00:00.000Z
       */
      updatedAt: string;
    };
    ChangePasswordRequestDto: {
      /**
       * @description The user's current password
       * @example currentPassword123
       */
      currentPassword: string;
      /**
       * @description The user's new password
       * @example newPassword123
       */
      newPassword: string;
      /**
       * @description The user's new password confirmation
       * @example newPassword123
       */
      newConfirmPassword: string;
    };
    UserItemResponseDto: {
      /**
       * Format: uuid
       * @description The user's ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar: string | null;
      /**
       * @description The user's status
       * @example ACTIVE
       */
      status: components["schemas"]["UserStatus"];
      /** @description The user's role with associated permissions */
      role: components["schemas"]["RoleResponseDto"];
    };
    CreateUserRequestDto: {
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's password
       * @example securePassword123
       */
      password: string;
      /**
       * @description User's full name
       * @example John Doe
       */
      name: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar?: string;
      /**
       * @description User status
       * @example ACTIVE
       */
      status?: components["schemas"]["UserStatus"];
      /**
       * Format: uuid
       * @description Role ID to assign to the user
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      roleId?: string;
    };
    CreateUserResponseDto: {
      /**
       * Format: uuid
       * @description The user's ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar: string | null;
      /**
       * @description The user's status
       * @example ACTIVE
       */
      status: components["schemas"]["UserStatus"];
      /** @description User's role with associated permissions */
      role: components["schemas"]["RoleWithPermissionsResponseDto"];
    };
    UpdateUserRequestDto: {
      /**
       * @description The user's password
       * @example securePassword123
       */
      password?: string;
      /**
       * @description User's full name
       * @example John Doe
       */
      name?: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber?: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar?: string;
      /**
       * @description User status
       * @example ACTIVE
       */
      status?: components["schemas"]["UserStatus"];
      /**
       * Format: uuid
       * @description Role ID to assign to the user
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      roleId?: string;
    };
    UpdateUserResponseDto: {
      /**
       * Format: uuid
       * @description The user's ID
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description The user's name
       * @example John Doe
       */
      name: string;
      /**
       * Format: email
       * @description The user's email address
       * @example user@example.com
       */
      email: string;
      /**
       * @description The user's phone number
       * @example 0987654321
       */
      phoneNumber: string;
      /**
       * @description URL to user's avatar image
       * @example https://example.com/avatars/johndoe.jpg
       */
      avatar: string | null;
      /**
       * @description The user's status
       * @example ACTIVE
       */
      status: components["schemas"]["UserStatus"];
      /** @description The user's role with associated permissions */
      role: components["schemas"]["RoleResponseDto"];
      /**
       * Format: date-time
       * @description The user's updated date
       * @example 2025-05-11T00:00:00.000Z
       */
      updatedAt: string;
    };
    UploadFileResponseDto: {
      /**
       * @description The URL of the uploaded file
       * @example https://bucket-name.s3.region.amazonaws.com/images/profile/avatar.jpg
       */
      url: string;
    };
    UploadFilesResponseDto: {
      /**
       * @description Array of URLs of the uploaded files
       * @example [
       *       "https://bucket-name.s3.region.amazonaws.com/images/profile/avatar1.jpg",
       *       "https://bucket-name.s3.region.amazonaws.com/images/profile/avatar2.jpg"
       *     ]
       */
      urls: string[];
    };
    PresignedUrlResponseDto: {
      /**
       * @description The generated presigned URL
       * @example https://bucket-name.s3.region.amazonaws.com/images/profile/avatar.jpg?X-Amz-Algorithm=...
       */
      url: string;
    };
    DeleteFileResponseDto: {
      /**
       * @description Confirmation message after file deletion
       * @example File deleted successfully.
       */
      message: string;
    };
    BrandTranslationWithLanguageResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the brand translation
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Name of the brand in the specified language
       * @example Brand Name
       */
      name: string;
      /**
       * @description Description of the brand in the specified language
       * @example This is a brand description.
       */
      description: string;
      /** @description Language details for the translation */
      language: components["schemas"]["LanguageResponseDto"];
    };
    BrandWithBrandTranslationsResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the brand
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * Format: url
       * @description URL to the brand's logo image
       * @example https://example.com/logos/brand-logo.png
       */
      logo: string;
      /**
       * @description Name of the brand
       * @example Brand Name
       */
      name: string;
      /** @description Translations of the brand in different languages */
      brandTranslations: components["schemas"]["BrandTranslationWithLanguageResponseDto"][];
    };
    BrandIdParamDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the brand
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
    };
    CreateBrandRequestDto: {
      /**
       * @description URL to the brand's logo image
       * @example https://example.com/logos/brand-logo.png
       */
      logo: string;
      /**
       * @description Name of the brand
       * @example Brand Name
       */
      name: string;
      /**
       * @description brandTranslationIds
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "223e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      brandTranslationIds?: string[];
    };
    CreateBrandResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the brand
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * Format: url
       * @description URL to the brand's logo image
       * @example https://example.com/logos/brand-logo.png
       */
      logo: string;
      /**
       * @description Name of the brand
       * @example Brand Name
       */
      name: string;
      /** @description Translations of the brand in different languages */
      brandTranslations: components["schemas"]["BrandTranslationWithLanguageResponseDto"][];
    };
    UpdateBrandRequestDto: {
      /**
       * @description URL to the brand's logo image
       * @example https://example.com/logos/brand-logo.png
       */
      logo?: string;
      /**
       * @description Name of the brand
       * @example Brand Name
       */
      name?: string;
      /**
       * @description brandTranslationIds
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "223e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      brandTranslationIds?: string[];
    };
    DeleteBrandRequestDto: {
      /**
       * @description Whether to hard delete the brand
       * @default false
       * @example false
       */
      isHardDelete: boolean;
    };
    BaseBrandResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the brand
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * Format: url
       * @description URL to the brand's logo image
       * @example https://example.com/logos/brand-logo.png
       */
      logo: string;
      /**
       * @description Name of the brand
       * @example Brand Name
       */
      name: string;
    };
    BrandTranslationWithBrandAndLanguageResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the brand translation
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Name of the brand in the specified language
       * @example Brand Name
       */
      name: string;
      /**
       * @description Description of the brand in the specified language
       * @example This is a brand description.
       */
      description: string;
      /** @description Language details for the translation */
      language: components["schemas"]["LanguageResponseDto"];
      /** @description Brand details for the translation */
      brand?: components["schemas"]["BaseBrandResponseDto"] | null;
    };
    CreateBrandTranslationRequestDto: {
      /**
       * @description Name of the brand translation
       * @example Brand Name
       */
      name: string;
      /**
       * @description Description of the brand translation
       * @example This is a brand description.
       */
      description: string;
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      languageId: string;
      /**
       * Format: uuid
       * @description ID of the brand for which the translation is created
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      brandId: string;
    };
    UpdateBrandTranslationRequestDto: {
      /**
       * @description Name of the brand translation
       * @example Brand Name
       */
      name?: string;
      /**
       * @description Description of the brand translation
       * @example This is a brand description.
       */
      description?: string;
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      languageId?: string;
      /**
       * Format: uuid
       * @description ID of the brand for which the translation is created
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      brandId?: string;
    };
    BaseCategoryResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the category
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Name of the category
       * @example Electronics
       */
      name: string;
      /**
       * Format: url
       * @description URL to the category's logo image
       * @example https://example.com/logos/category-logo.png
       */
      logo?: Record<string, never> | null;
    };
    CategoryTranslationWithLanguageResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the category translation
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Name of the category translation in the specified language
       * @example Electronics
       */
      name: string;
      /**
       * @description Description of the category translation in the specified language
       * @example This is a category description.
       */
      description: string;
      /** @description Language details for the translation */
      language: components["schemas"]["LanguageResponseDto"];
    };
    CategoryWithChildrenCategoriesResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the category
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Name of the category
       * @example Electronics
       */
      name: string;
      /**
       * Format: url
       * @description URL to the category's logo image
       * @example https://example.com/logos/category-logo.png
       */
      logo?: Record<string, never> | null;
      /** @description Parent category details */
      parentCategory?: components["schemas"]["BaseCategoryResponseDto"] | null;
      /** @description Translations of the category in different languages */
      categoryTranslations: components["schemas"]["CategoryTranslationWithLanguageResponseDto"][];
      /** @description List of child categories */
      childrenCategories: components["schemas"]["BaseCategoryResponseDto"][];
    };
    GetAllCategoriesResponseDto: {
      /** @description List of all categories with their translations and children */
      data: components["schemas"]["CategoryWithChildrenCategoriesResponseDto"][];
      /**
       * @description Total number of categories
       * @example 100
       */
      totalCount: number;
    };
    CreateCategoryRequestDto: {
      /**
       * @description Name of the category
       * @example Electronics
       */
      name: string;
      /**
       * @description URL to the category's logo image
       * @example https://example.com/logos/category-logo.png
       */
      logo?: string;
      /**
       * @description List of category translation IDs to associate with the category
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000"
       *     ]
       */
      categoryTranslationIds?: string[];
      /**
       * Format: uuid
       * @description ID of the parent category
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      parentCategoryId?: string;
    };
    UpdateCategoryRequestDto: {
      /**
       * @description Name of the category
       * @example Electronics
       */
      name?: string;
      /**
       * @description URL to the category's logo image
       * @example https://example.com/logos/category-logo.png
       */
      logo?: string;
      /**
       * @description List of category translation IDs to associate with the category
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000"
       *     ]
       */
      categoryTranslationIds?: string[];
      /**
       * Format: uuid
       * @description ID of the parent category
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      parentCategoryId?: string;
    };
    CategoryTranslationWithCategoryAndLanguageResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the category translation
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description Name of the category translation in the specified language
       * @example Electronics
       */
      name: string;
      /**
       * @description Description of the category translation in the specified language
       * @example This is a category description.
       */
      description: string;
      /** @description Language details for the translation */
      language: components["schemas"]["LanguageResponseDto"];
      /** @description Category details for the translation */
      category?: components["schemas"]["BaseCategoryResponseDto"] | null;
    };
    CreateCategoryTranslationRequestDto: {
      /**
       * @description Name of the category translation in the specified language
       * @example Electronics
       */
      name: string;
      /**
       * @description Description of the category translation in the specified language
       * @example This is a category description.
       */
      description: string;
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      languageId: string;
      /**
       * Format: uuid
       * @description Unique identifier for the category
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      categoryId: string;
    };
    UpdateCategoryTranslationRequestDto: {
      /**
       * @description Name of the category translation in the specified language
       * @example Electronics
       */
      name?: string;
      /**
       * @description Description of the category translation in the specified language
       * @example This is a category description.
       */
      description?: string;
      /**
       * @description Language code (ISO 639-1)
       * @example en
       */
      languageId?: string;
      /**
       * Format: uuid
       * @description Unique identifier for the category
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      categoryId?: string;
    };
    VariantResponseDto: {
      /**
       * @description Name of the variant
       * @example Color
       */
      value: string;
      /**
       * @description List of options for the variant
       * @example [
       *       "Red",
       *       "Blue",
       *       "Green"
       *     ]
       */
      options: string[];
    };
    ProductTranslationResponseDto: {
      /**
       * Format: uuid
       * @description The unique identifier of the product translation.
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * @description The name of the product in the specified language.
       * @example Product Name
       */
      name: string;
      /**
       * @description The description of the product in the specified language.
       * @example This is a product description.
       */
      description: string;
      /** @description The language of the product translation. */
      language: components["schemas"]["LanguageResponseDto"];
    };
    ProductResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier of the product
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * Format: date-time
       * @description  Publish date of the product
       * @example 2023-10-01T00:00:00Z
       */
      publishedAt: Record<string, never> | null;
      /**
       * @description Name of the product
       * @example Sample Product
       */
      name: string;
      /**
       * @description Base price of the product
       * @example 100
       */
      basePrice: number;
      /**
       * @description Virtual price of the product
       * @example 90
       */
      virtualPrice: number;
      /**
       * @description Array of product image URLs
       * @example [
       *       "https://example.com/image1.jpg",
       *       "https://example.com/image2.png",
       *       "https://example.com/image3.webp"
       *     ]
       */
      images: string[];
      /** @description Brand details associated with the product */
      brand?: components["schemas"]["BaseBrandResponseDto"] | null;
      /** @description List of variants for the product */
      variants: components["schemas"]["VariantResponseDto"][];
      /** @description List of product translations in different languages */
      productTranslations: components["schemas"]["ProductTranslationResponseDto"][];
    };
    BaseSKUResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier for the SKU
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /** @description SKU value */
      value: string;
      /**
       * @description Price of the SKU
       * @example 19.99
       */
      price: number;
      /**
       * @description Stock quantity of the SKU
       * @example 100
       */
      stock: number;
      /**
       * Format: url
       * @description Image URL of the SKU
       * @example https://example.com/images/sku-image.png
       */
      image: string;
    };
    ProductDetailResponseDto: {
      /**
       * Format: uuid
       * @description Unique identifier of the product
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      id: string;
      /**
       * Format: date-time
       * @description  Publish date of the product
       * @example 2023-10-01T00:00:00Z
       */
      publishedAt: Record<string, never> | null;
      /**
       * @description Name of the product
       * @example Sample Product
       */
      name: string;
      /**
       * @description Base price of the product
       * @example 100
       */
      basePrice: number;
      /**
       * @description Virtual price of the product
       * @example 90
       */
      virtualPrice: number;
      /**
       * @description Array of product image URLs
       * @example [
       *       "https://example.com/image1.jpg",
       *       "https://example.com/image2.png",
       *       "https://example.com/image3.webp"
       *     ]
       */
      images: string[];
      /** @description Brand details associated with the product */
      brand?: components["schemas"]["BaseBrandResponseDto"] | null;
      /** @description List of variants for the product */
      variants: components["schemas"]["VariantResponseDto"][];
      /** @description List of product translations in different languages */
      productTranslations: components["schemas"]["ProductTranslationResponseDto"][];
      /** @description  Categories associated with the product */
      categories: components["schemas"]["BaseCategoryResponseDto"][];
      /** @description List of product translations in different languages */
      skus: components["schemas"]["BaseSKUResponseDto"][];
    };
    VariantRequestDto: {
      /**
       * @description Name of the variant
       * @example Color
       */
      value: string;
      /**
       * @description List of options for the variant
       * @example [
       *       "Red",
       *       "Blue",
       *       "Green"
       *     ]
       */
      options: string[];
    };
    UpsertSKURequestDto: {
      /**
       * @description SKU value
       * @example SKU-12345
       */
      value: string;
      /**
       * @description Price of the SKU
       * @example 19.99
       */
      price: number;
      /**
       * @description Stock quantity of the SKU
       * @example 100
       */
      stock: number;
      /**
       * Format: url
       * @description Image URL of the SKU
       * @example https://example.com/images/sku-image.png
       */
      image: string;
    };
    CreateProductRequestDto: {
      /**
       * Format: date-time
       * @description The date when the product will be published
       * @default 2025-07-10T15:54:38.209Z
       * @example 2023-10-01T00:00:00Z
       */
      publishedAt: string;
      /**
       * @description The name of the product
       * @example Sample Product
       */
      name: string;
      /**
       * @description Base price of the product
       * @example 100
       */
      basePrice: number;
      /**
       * @description Virtual price of the product
       * @example 90
       */
      virtualPrice: number;
      /**
       * @description Array of product image URLs
       * @example [
       *       "https://example.com/image1.jpg",
       *       "https://example.com/image2.png",
       *       "https://example.com/image3.webp"
       *     ]
       */
      images: string[];
      /**
       * Format: uuid
       * @description ID of the brand associated with the product
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      brandId: string;
      /** @description List of variants for the product */
      variants: components["schemas"]["VariantRequestDto"][];
      /**
       * @description List of category IDs associated with the product
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "123e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      categoryIds: string[];
      /** @description List of SKUs for the product */
      skus: components["schemas"]["UpsertSKURequestDto"][];
    };
    UpdateProductRequestDto: {
      /**
       * Format: date-time
       * @description The date when the product will be published
       * @default 2025-07-10T15:54:38.209Z
       * @example 2023-10-01T00:00:00Z
       */
      publishedAt: string;
      /**
       * @description The name of the product
       * @example Sample Product
       */
      name?: string;
      /**
       * @description Base price of the product
       * @example 100
       */
      basePrice?: number;
      /**
       * @description Virtual price of the product
       * @example 90
       */
      virtualPrice?: number;
      /**
       * @description Array of product image URLs
       * @example [
       *       "https://example.com/image1.jpg",
       *       "https://example.com/image2.png",
       *       "https://example.com/image3.webp"
       *     ]
       */
      images?: string[];
      /**
       * Format: uuid
       * @description ID of the brand associated with the product
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      brandId?: string;
      /**
       * @description List of category IDs associated with the product
       * @example [
       *       "123e4567-e89b-12d3-a456-426614174000",
       *       "123e4567-e89b-12d3-a456-426614174001"
       *     ]
       */
      categoryIds?: string[];
      /** @description List of variants for the product */
      variants: components["schemas"]["VariantRequestDto"][];
      /** @description List of SKUs for the product */
      skus: components["schemas"]["UpsertSKURequestDto"][];
    };
    DeleteProductResponseDto: {
      /**
       * @description Message indicating the result of the delete operation
       * @example Product deleted successfully
       */
      message: string;
    };
    CreateProductTranslationRequestDto: {
      /**
       * @description The name of the product translation.
       * @example Product Name
       */
      name: string;
      /**
       * @description The description of the product translation.
       * @example This is a product description.
       */
      description: string;
      /**
       * @description The language code for the product translation.
       * @example en
       */
      languageId: string;
      /**
       * Format: uuid
       * @description The unique identifier of the product.
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      productId: string;
    };
    UpdateProductTranslationRequestDto: {
      /**
       * @description The name of the product translation.
       * @example Product Name
       */
      name?: string;
      /**
       * @description The description of the product translation.
       * @example This is a product description.
       */
      description?: string;
      /**
       * @description The language code for the product translation.
       * @example en
       */
      languageId?: string;
      /**
       * Format: uuid
       * @description The unique identifier of the product.
       * @example 123e4567-e89b-12d3-a456-426614174000
       */
      productId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
  register: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterRequestDto"];
      };
    };
    responses: {
      /** @description Register */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RegisterResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginRequestDto"];
      };
    };
    responses: {
      /** @description Login */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenRequestDto"];
      };
    };
    responses: {
      /** @description Refresh token */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RefreshTokenResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  logout: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LogoutRequestDto"];
      };
    };
    responses: {
      /** @description Logout */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LogoutResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  sendOTP: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendOTPRequestDto"];
      };
    };
    responses: {
      /** @description Send OTP */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["SendOTPResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getAuthorizationUrl: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Google authorization URL */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example https://accounts.google.com/o/oauth2/v2/auth?... */
            url?: string;
          };
        };
      };
    };
  };
  googleCallback: {
    parameters: {
      query: {
        code: string;
        state: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  forgotPassword: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForgotPasswordRequestDto"];
      };
    };
    responses: {
      /** @description Forgot password */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ForgotPasswordResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  enable2fa: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Enable 2FA */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EnableTwoFactorAuthenticationResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  disable2fa: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Disable2faRequestDto"];
      };
    };
    responses: {
      /** @description Disable 2FA */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Disable2faResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getLanguages: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of languages with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["LanguageResponseDto"][];
          };
        };
      };
    };
  };
  getLanguageById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Language ID (ISO 639-1) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a specific language by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateLanguage: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Language ID (ISO 639-1) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageUpdateRequestDto"];
      };
    };
    responses: {
      /** @description Update an existing language. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LanguageUpdateResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteLanguage: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Language ID (ISO 639-1) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Delete a specific language by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LanguageDeleteResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createLanguage: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LanguageCreateRequestDto"];
      };
    };
    responses: {
      /** @description Create a new language. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LanguageCreateResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getPermissions: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "description" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of permissions with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["PermissionWithRolesResponseDto"][];
          };
        };
      };
    };
  };
  createPermission: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePermissionRequestDto"];
      };
    };
    responses: {
      /** @description Create a new permission with associated roles. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PermissionWithRolesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getPermissionById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Permission ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a specific permission by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PermissionWithRolesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updatePermission: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Permission ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePermissionRequestDto"];
      };
    };
    responses: {
      /** @description Update an existing permission by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PermissionWithRolesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deletePermission: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Permission ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeletePermissionRequestDto"];
      };
    };
    responses: {
      /** @description Delete a specific permission by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PermissionWithRolesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getRoles: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: string;
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of roles with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["RoleWithPermissionsResponseDto"][];
          };
        };
      };
    };
  };
  createRole: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateRoleRequestDto"];
      };
    };
    responses: {
      /** @description Create a new role with permissions. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleWithPermissionsResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getRoleById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Role ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a role by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleWithPermissionsResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateRole: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Role ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateRoleRequestDto"];
      };
    };
    responses: {
      /** @description Update a role by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleWithPermissionsResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteRole: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Role ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteRoleRequestDto"];
      };
    };
    responses: {
      /** @description Delete a role by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["RoleWithPermissionsResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getProfile: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieves the complete profile information for the authenticated user including role and permissions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateProfile: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileRequestDto"];
      };
    };
    responses: {
      /** @description Updates the profile information for the authenticated user including role and permissions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateProfileResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  changePassword: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordRequestDto"];
      };
    };
    responses: {
      /** @description Changes the password for the authenticated user. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProfileResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getUsers: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "email" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of users with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["UserItemResponseDto"][];
          };
        };
      };
    };
  };
  createUser: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestDto"];
      };
    };
    responses: {
      /** @description Creates a new user with the provided details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateUserResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getUserById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description ID of the user to retrieve */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieves a specific user by their ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserItemResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateUser: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description ID of the user to update */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserRequestDto"];
      };
    };
    responses: {
      /** @description Updates the details of an existing user by ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateUserResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteUser: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description ID of the user to delete */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deletes a user by their ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UserItemResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  uploadLargeImageFromDisk: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Upload a large image from disk to S3. The image data is expected to be in the request body as a file. This is useful for large files that cannot be uploaded from memory. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadFileResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  uploadArrayOfImages: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Upload multiple images from buffer to S3. The images data are expected to be in the request body as an array of files. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadFilesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  uploadMultipleImages: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description  Upload multiple images from buffer to S3. The images data are expected to be in the request body as an array of files. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UploadFilesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getPresignedUrl: {
    parameters: {
      query: {
        /** @description The S3 key/path of the file */
        key: string;
        /** @description Type of presigned URL */
        type: "upload" | "download";
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Generate a presigned URL for uploading or downloading files to/from S3. Use this URL to perform the actual upload/download operation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PresignedUrlResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteMedia: {
    parameters: {
      query: {
        /** @description The S3 key/path of the file */
        key: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Delete a file from S3 using its key/path. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteFileResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getBrands: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of brands with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["BrandWithBrandTranslationsResponseDto"][];
          };
        };
      };
    };
  };
  createBrand: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBrandRequestDto"];
      };
    };
    responses: {
      /** @description Creates a new brand with the provided details. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateBrandResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getBrandById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: components["schemas"]["BrandIdParamDto"];
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieves a specific brand by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrandWithBrandTranslationsResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateBrand: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Unique identifier for the brand */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBrandRequestDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  deleteBrand: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Unique identifier for the brand */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteBrandRequestDto"];
      };
    };
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  getBrandTranslations: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of brand translations with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["BrandTranslationWithBrandAndLanguageResponseDto"][];
          };
        };
      };
    };
  };
  createBrandTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBrandTranslationRequestDto"];
      };
    };
    responses: {
      /** @description Creates a new brand translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CreateBrandTranslationRequestDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getBrandTranslationById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The ID of the brand translation to retrieve */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieves a specific brand translation by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrandTranslationWithBrandAndLanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateBrandTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBrandTranslationRequestDto"];
      };
    };
    responses: {
      /** @description Updates an existing brand translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["UpdateBrandTranslationRequestDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteBrandTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deletes an existing brand translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["BrandTranslationWithBrandAndLanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getAllCategories: {
    parameters: {
      query?: {
        /** @description Page number for pagination */
        parentCategoryId?: number;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve all categories with optional filtering by language and parent category. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["GetAllCategoriesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  createCategory: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCategoryRequestDto"];
      };
    };
    responses: {
      /** @description Create a new category with translations and children. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryWithChildrenCategoriesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getCategoryById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Category ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a single category by its ID, including its translations in the specified language. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryWithChildrenCategoriesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateCategory: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Category ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCategoryRequestDto"];
      };
    };
    responses: {
      /** @description Update a category by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryWithChildrenCategoriesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteCategory: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description Category ID (UUID) */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Delete a category by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryWithChildrenCategoriesResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getCategoryTranslations: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of category translations with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["CategoryTranslationWithCategoryAndLanguageResponseDto"][];
          };
        };
      };
    };
  };
  createCategoryTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCategoryTranslationRequestDto"];
      };
    };
    responses: {
      /** @description Creates a new category translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryTranslationWithCategoryAndLanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getCategoryTranslationById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieves a specific category translation by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryTranslationWithCategoryAndLanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateCategoryTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The ID of the category translation to update */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCategoryTranslationRequestDto"];
      };
    };
    responses: {
      /** @description Updates a category translation by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryTranslationWithCategoryAndLanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteCategoryTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The ID of the category translation to delete */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deletes a category translation by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["CategoryTranslationWithCategoryAndLanguageResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getProducts: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?:
          | "createdAt"
          | "name"
          | "basePrice"
          | "publishedAt"
          | "updatedAt"
          | "virtualPrice"
          | "sale";
        /** @description Search keyword */
        keyword?: string;
        /** @description Filter products by brand IDs */
        brandIds?: string[];
        /** @description Filter products by category IDs */
        categoryIds?: string[];
        /** @description Search term to filter products by name */
        name?: string;
        /** @description Filter products by minimum price */
        minPrice?: number;
        /** @description Filter products by maximum price */
        maxPrice?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of products with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["ProductResponseDto"][];
          };
        };
      };
    };
  };
  getProductById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The unique identifier of the product to retrieve. */
        id: unknown;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a product by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductDetailResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getManageProducts: {
    parameters: {
      query: {
        /** @description Filter products by brand IDs */
        brandIds?: string[];
        /** @description Filter products by category IDs */
        categoryIds?: string[];
        /** @description Search term to filter products by name */
        name?: string;
        /** @description Filter products by minimum price */
        minPrice?: number;
        /** @description Filter products by maximum price */
        maxPrice?: number;
        /** @description Field to order by */
        orderBy?:
          | "createdAt"
          | "name"
          | "basePrice"
          | "publishedAt"
          | "updatedAt"
          | "virtualPrice"
          | "sale";
        /** @description Filter product by created by user ID */
        createdById: string;
        /** @description Filter products by publication status */
        isPublic?: boolean;
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of products with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["ProductResponseDto"][];
          };
        };
      };
    };
  };
  createProduct: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProductRequestDto"];
      };
    };
    responses: {
      /** @description Create a new product. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductDetailResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getManageProductById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The unique identifier of the product to retrieve. */
        id: unknown;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a product by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductDetailResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateProduct: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductRequestDto"];
      };
    };
    responses: {
      /** @description Update an existing product by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductDetailResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteProduct: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The unique identifier of the product to delete. */
        id: unknown;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Delete a product by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["DeleteProductResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getProductTranslations: {
    parameters: {
      query?: {
        /** @description Number of items per page */
        pageSize?: number;
        /** @description Page index (starts from 0) */
        pageIndex?: number;
        /** @description Sort order */
        order?: "asc" | "desc";
        /** @description Field to order by */
        orderBy?: "createdAt" | "name" | "updatedAt";
        /** @description Search keyword */
        keyword?: string;
      };
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieve a list of product translations with pagination. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PageDto"] & {
            data: components["schemas"]["ProductTranslationResponseDto"][];
          };
        };
      };
    };
  };
  createProductTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProductTranslationRequestDto"];
      };
    };
    responses: {
      /** @description Creates a new product translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductTranslationResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  getProductTranslationById: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The ID of the product translation to retrieve */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Retrieves a specific product translation by its ID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductTranslationResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  updateProductTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The ID of the product translation to update */
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProductTranslationRequestDto"];
      };
    };
    responses: {
      /** @description Updates an existing product translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductTranslationResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  deleteProductTranslation: {
    parameters: {
      query?: never;
      header: {
        /** @description Bearer auth token */
        Authorization: string;
      };
      path: {
        /** @description The ID of the product translation to delete */
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Deletes an existing product translation. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ProductTranslationResponseDto"];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Forbidden */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Unprocessable Entity */
      422: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
      /** @description Internal Server Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
