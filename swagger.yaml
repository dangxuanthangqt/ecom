openapi: 3.0.0
paths:
  /auth/register:
    post:
      operationId: register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDto"
      responses:
        "200":
          description: Register
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Register user
      tags: &a1
        - Auth
  /auth/login:
    post:
      operationId: login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "200":
          description: Login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Login user
      tags: *a1
  /auth/refresh-token:
    post:
      operationId: refreshToken
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequestDto"
      responses:
        "200":
          description: Refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Refresh token
      tags: *a1
  /auth/logout:
    post:
      operationId: logout
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequestDto"
      responses:
        "200":
          description: Logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Logout user
      tags: *a1
  /auth/otp:
    post:
      operationId: sendOTP
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendOTPRequestDto"
      responses:
        "200":
          description: Send OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendOTPResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Send OTP
      tags: *a1
  /auth/google/authorization-url:
    get:
      operationId: getAuthorizationUrl
      parameters: []
      responses:
        "200":
          description: Google authorization URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://accounts.google.com/o/oauth2/v2/auth?...
      tags: *a1
  /auth/google/callback:
    get:
      operationId: googleCallback
      parameters:
        - name: code
          required: true
          in: query
          schema:
            type: string
        - name: state
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      summary: Google callback
      tags: *a1
  /auth/forgot-password:
    post:
      operationId: forgotPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequestDto"
      responses:
        "200":
          description: Forgot password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForgotPasswordResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Forgot password
      tags: *a1
  /auth/2fa/enable:
    post:
      operationId: enable2fa
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enable 2FA
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnableTwoFactorAuthenticationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Enable 2FA
      tags: *a1
  /auth/2fa/disable:
    post:
      operationId: disable2fa
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Disable2faRequestDto"
      responses:
        "200":
          description: Disable 2FA
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Disable2faResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Disable 2FA
      tags: *a1
  /languages:
    get:
      operationId: getLanguages
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of languages with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/LanguageResponseDto"
                    required:
                      - data
      summary: Get a list of languages
      tags: &a2
        - Languages
  /languages/{id}:
    get:
      operationId: getLanguageById
      parameters:
        - name: id
          required: true
          in: path
          description: Language ID (ISO 639-1)
          schema:
            minLength: 2
            maxLength: 2
            example: en
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a specific language by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a language by ID
      tags: *a2
    put:
      operationId: updateLanguage
      parameters:
        - name: id
          required: true
          in: path
          description: Language ID (ISO 639-1)
          schema:
            minLength: 2
            maxLength: 2
            example: en
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageUpdateRequestDto"
      responses:
        "200":
          description: Update an existing language.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageUpdateResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update a language
      tags: *a2
    delete:
      operationId: deleteLanguage
      parameters:
        - name: id
          required: true
          in: path
          description: Language ID (ISO 639-1)
          schema:
            minLength: 2
            maxLength: 2
            example: en
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delete a specific language by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageDeleteResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a language
      tags: *a2
  /languages/create:
    post:
      operationId: createLanguage
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageCreateRequestDto"
      responses:
        "200":
          description: Create a new language.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageCreateResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new language
      tags: *a2
  /permissions:
    get:
      operationId: getPermissions
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - description
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of permissions with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/PermissionWithRolesResponseDto"
                    required:
                      - data
      summary: Get a list of permissions
      tags: &a3
        - Permissions
    post:
      operationId: createPermission
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePermissionRequestDto"
      responses:
        "200":
          description: Create a new permission with associated roles.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new permission
      tags: *a3
  /permissions/{id}:
    get:
      operationId: getPermissionById
      parameters:
        - name: id
          required: true
          in: path
          description: Permission ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a specific permission by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a permission by ID
      tags: *a3
    put:
      operationId: updatePermission
      parameters:
        - name: id
          required: true
          in: path
          description: Permission ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePermissionRequestDto"
      responses:
        "200":
          description: Update an existing permission by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update a permission
      tags: *a3
    delete:
      operationId: deletePermission
      parameters:
        - name: id
          required: true
          in: path
          description: Permission ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePermissionRequestDto"
      responses:
        "200":
          description: Delete a specific permission by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a permission
      tags: *a3
  /roles:
    get:
      operationId: getRoles
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: name
            type: string
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of roles with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
                    required:
                      - data
      summary: Get a list of roles
      tags: &a4
        - Roles
    post:
      operationId: createRole
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequestDto"
      responses:
        "200":
          description: Create a new role with permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new role
      tags: *a4
  /roles/{id}:
    get:
      operationId: getRoleById
      parameters:
        - name: id
          required: true
          in: path
          description: Role ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a role by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a role by ID
      tags: *a4
    put:
      operationId: updateRole
      parameters:
        - name: id
          required: true
          in: path
          description: Role ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequestDto"
      responses:
        "200":
          description: Update a role by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update an existing role
      tags: *a4
    delete:
      operationId: deleteRole
      parameters:
        - name: id
          required: true
          in: path
          description: Role ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRoleRequestDto"
      responses:
        "200":
          description: Delete a role by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a role
      tags: *a4
  /profile:
    get:
      operationId: getProfile
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Retrieves the complete profile information for the authenticated
            user including role and permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get current user profile.
      tags: &a5
        - Profile
    put:
      operationId: updateProfile
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequestDto"
      responses:
        "200":
          description:
            Updates the profile information for the authenticated user
            including role and permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProfileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update current user profile.
      tags: *a5
  /profile/change-password:
    put:
      operationId: changePassword
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequestDto"
      responses:
        "200":
          description: Changes the password for the authenticated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Change current user password.
      tags: *a5
  /users:
    get:
      operationId: getUsers
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - email
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of users with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserItemResponseDto"
                    required:
                      - data
      summary: Get a list of users
      tags: &a6
        - Users
    post:
      operationId: createUser
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestDto"
      responses:
        "200":
          description: Creates a new user with the provided details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new user.
      tags: *a6
  /users/{id}:
    get:
      operationId: getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the user to retrieve
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieves a specific user by their ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserItemResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a user by ID
      tags: *a6
    put:
      operationId: updateUser
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the user to update
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
      responses:
        "200":
          description: Updates the details of an existing user by ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update an existing user.
      tags: *a6
    delete:
      operationId: deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the user to delete
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deletes a user by their ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserItemResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a user by ID
      tags: *a6
  /media/upload/image:
    post:
      operationId: uploadLargeImageFromDisk
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Upload a large image from disk to S3. The image data is expected to
            be in the request body as a file. This is useful for large files
            that cannot be uploaded from memory.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Upload a large image from disk
      tags: &a7
        - Media
  /media/upload/array-of-images:
    post:
      operationId: uploadArrayOfImages
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Upload multiple images from buffer to S3. The images data are
            expected to be in the request body as an array of files.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFilesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Upload multiple images from buffer
      tags: *a7
  /media/upload/multiple-images:
    post:
      operationId: uploadMultipleImages
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            " Upload multiple images from buffer to S3. The images data are
            expected to be in the request body as an array of files."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFilesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Upload multiple images from buffer
      tags: *a7
  /media/presigned-url:
    get:
      operationId: getPresignedUrl
      parameters:
        - name: key
          required: true
          in: query
          description: The S3 key/path of the file
          schema:
            example: images/profile/avatar.jpg
            type: string
        - name: type
          required: true
          in: query
          description: Type of presigned URL
          schema:
            example: upload
            type: string
            enum:
              - upload
              - download
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Generate a presigned URL for uploading or downloading files to/from
            S3. Use this URL to perform the actual upload/download operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresignedUrlResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get presigned URL for uploading/downloading files
      tags: *a7
  /media/delete:
    delete:
      operationId: deleteMedia
      parameters:
        - name: key
          required: true
          in: query
          description: The S3 key/path of the file
          schema:
            example: images/profile/avatar.jpg
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delete a file from S3 using its key/path.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteFileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a file from S3
      tags: *a7
  /brands:
    get:
      operationId: getBrands
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
      responses:
        "200":
          description: Retrieve a list of brands with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BrandWithBrandTranslationsResponseDto"
                    required:
                      - data
      summary: Get a list of brands
      tags: &a8
        - Brands
    post:
      operationId: createBrand
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBrandRequestDto"
      responses:
        "200":
          description: Creates a new brand with the provided details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBrandResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new brand
      tags: *a8
  /brands/{id}:
    get:
      operationId: getBrandById
      parameters:
        - name: id
          required: true
          in: path
          schema:
            $ref: "#/components/schemas/BrandIdParamDto"
      responses:
        "200":
          description: Retrieves a specific brand by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandWithBrandTranslationsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a brand by ID
      tags: *a8
    put:
      operationId: updateBrand
      parameters:
        - name: id
          required: true
          in: path
          description: Unique identifier for the brand
          schema:
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBrandRequestDto"
      responses:
        "200":
          description: ""
      tags: *a8
    delete:
      operationId: deleteBrand
      parameters:
        - name: id
          required: true
          in: path
          description: Unique identifier for the brand
          schema:
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteBrandRequestDto"
      responses:
        "200":
          description: ""
      tags: *a8
  /brand-translations:
    get:
      operationId: getBrandTranslations
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of brand translations with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/BrandTranslationWithBrandAndLanguageResponseDto"
                    required:
                      - data
      summary: Get a list of brand translations
      tags: &a9
        - BrandTranslation
    post:
      operationId: createBrandTranslation
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateBrandTranslationRequestDto"
      responses:
        "200":
          description: Creates a new brand translation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateBrandTranslationRequestDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new brand translation
      tags: *a9
  /brand-translations/{id}:
    get:
      operationId: getBrandTranslationById
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the brand translation to retrieve
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieves a specific brand translation by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandTranslationWithBrandAndLanguageResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a brand translation by ID
      tags: *a9
    put:
      operationId: updateBrandTranslation
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateBrandTranslationRequestDto"
      responses:
        "200":
          description: Updates an existing brand translation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateBrandTranslationRequestDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update a brand translation
      tags: *a9
    delete:
      operationId: deleteBrandTranslation
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deletes an existing brand translation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandTranslationWithBrandAndLanguageResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a brand translation
      tags: *a9
  /categories:
    get:
      operationId: getAllCategories
      parameters:
        - name: parentCategoryId
          required: false
          in: query
          description: Page number for pagination
          schema:
            example: 1
            type: number
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Retrieve all categories with optional filtering by language and
            parent category.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetAllCategoriesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get all categories
      tags: &a10
        - Categories
    post:
      operationId: createCategory
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryRequestDto"
      responses:
        "200":
          description: Create a new category with translations and children.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryWithChildrenCategoriesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new category
      tags: *a10
  /categories/{id}:
    get:
      operationId: getCategoryById
      parameters:
        - name: id
          required: true
          in: path
          description: Category ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Retrieve a single category by its ID, including its translations in
            the specified language.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryWithChildrenCategoriesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get category by ID
      tags: *a10
    put:
      operationId: updateCategory
      parameters:
        - name: id
          required: true
          in: path
          description: Category ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategoryRequestDto"
      responses:
        "200":
          description: Update a category by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryWithChildrenCategoriesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update an existing category
      tags: *a10
    delete:
      operationId: deleteCategory
      parameters:
        - name: id
          required: true
          in: path
          description: Category ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delete a category by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryWithChildrenCategoriesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a category
      tags: *a10
  /category-translations:
    get:
      operationId: getCategoryTranslations
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of category translations with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref:
                            "#/components/schemas/CategoryTranslationWithCategoryAndLanguageResponseD\
                            to"
                    required:
                      - data
      summary: Get a list of category translations
      tags: &a11
        - Category Translations
    post:
      operationId: createCategoryTranslation
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateCategoryTranslationRequestDto"
      responses:
        "200":
          description: Creates a new category translation.
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/CategoryTranslationWithCategoryAndLanguageResponseD\
                  to"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new category translation
      tags: *a11
  /category-translations/{id}:
    get:
      operationId: getCategoryTranslationById
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieves a specific category translation by its ID.
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/CategoryTranslationWithCategoryAndLanguageResponseD\
                  to"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a category translation by ID
      tags: *a11
    put:
      operationId: updateCategoryTranslation
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the category translation to update
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCategoryTranslationRequestDto"
      responses:
        "200":
          description: Updates a category translation by its ID.
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/CategoryTranslationWithCategoryAndLanguageResponseD\
                  to"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update an existing category translation
      tags: *a11
    delete:
      operationId: deleteCategoryTranslation
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the category translation to delete
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deletes a category translation by its ID.
          content:
            application/json:
              schema:
                $ref:
                  "#/components/schemas/CategoryTranslationWithCategoryAndLanguageResponseD\
                  to"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a category translation
      tags: *a11
  /products:
    get:
      operationId: getProducts
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - name
              - basePrice
              - publishedAt
              - updatedAt
              - virtualPrice
              - sale
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: brandIds
          required: false
          in: query
          description: Filter products by brand IDs
          schema:
            example:
              - 123e4567-e89b-12d3-a456-426614174000
              - 123e4567-e89b-12d3-a456-426614174001
            type: array
            items:
              type: string
        - name: categoryIds
          required: false
          in: query
          description: Filter products by category IDs
          schema:
            example:
              - 123e4567-e89b-12d3-a456-426614174000
              - 123e4567-e89b-12d3-a456-426614174001
            type: array
            items:
              type: string
        - name: name
          required: false
          in: query
          description: Search term to filter products by name
          schema:
            example: Sample Product
            type: string
        - name: minPrice
          required: false
          in: query
          description: Filter products by minimum price
          schema:
            example: 10
            type: number
        - name: maxPrice
          required: false
          in: query
          description: Filter products by maximum price
          schema:
            example: 100
            type: number
      responses:
        "200":
          description: Retrieve a list of products with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ProductResponseDto"
                    required:
                      - data
      summary: Get a list of products
      tags: &a12
        - Products
  /products/{id}:
    get:
      operationId: getProductById
      parameters:
        - name: id
          required: true
          in: path
          description: The unique identifier of the product to retrieve.
          schema:
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      responses:
        "200":
          description: Retrieve a product by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetailResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get product by ID
      tags: *a12
  /manage-product/products:
    get:
      operationId: getManageProducts
      parameters:
        - name: brandIds
          required: false
          in: query
          description: Filter products by brand IDs
          schema:
            example:
              - 123e4567-e89b-12d3-a456-426614174000
              - 123e4567-e89b-12d3-a456-426614174001
            type: array
            items:
              type: string
        - name: categoryIds
          required: false
          in: query
          description: Filter products by category IDs
          schema:
            example:
              - 123e4567-e89b-12d3-a456-426614174000
              - 123e4567-e89b-12d3-a456-426614174001
            type: array
            items:
              type: string
        - name: name
          required: false
          in: query
          description: Search term to filter products by name
          schema:
            example: Sample Product
            type: string
        - name: minPrice
          required: false
          in: query
          description: Filter products by minimum price
          schema:
            example: 10
            type: number
        - name: maxPrice
          required: false
          in: query
          description: Filter products by maximum price
          schema:
            example: 100
            type: number
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: name
            type: string
            enum:
              - createdAt
              - name
              - basePrice
              - publishedAt
              - updatedAt
              - virtualPrice
              - sale
        - name: createdById
          required: true
          in: query
          description: Filter product by created by user ID
          schema:
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: isPublic
          required: false
          in: query
          description: Filter products by publication status
          schema:
            example: true
            type: boolean
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of products with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ProductResponseDto"
                    required:
                      - data
      summary: Get a list of products
      tags: &a13
        - Manage Products
    post:
      operationId: createProduct
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductRequestDto"
      responses:
        "200":
          description: Create a new product.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetailResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new product
      tags: *a13
  /manage-product/products/{id}:
    get:
      operationId: getManageProductById
      parameters:
        - name: id
          required: true
          in: path
          description: The unique identifier of the product to retrieve.
          schema:
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a product by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetailResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get product by ID
      tags: *a13
    put:
      operationId: updateProduct
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductRequestDto"
      responses:
        "200":
          description: Update an existing product by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductDetailResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update product by ID
      tags: *a13
    delete:
      operationId: deleteProduct
      parameters:
        - name: id
          required: true
          in: path
          description: The unique identifier of the product to delete.
          schema:
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Delete a product by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteProductResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete product by ID
      tags: *a13
  /product-translations:
    get:
      operationId: getProductTranslations
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: asc
            type: string
            enum:
              - asc
              - desc
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: createdAt
            type: string
            enum:
              - createdAt
              - name
              - updatedAt
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of product translations with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/ProductTranslationResponseDto"
                    required:
                      - data
      summary: Get a list of product translations
      tags: &a14
        - Product Translations
    post:
      operationId: createProductTranslation
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateProductTranslationRequestDto"
      responses:
        "200":
          description: Creates a new product translation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTranslationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new product translation
      tags: *a14
  /product-translations/{id}:
    get:
      operationId: getProductTranslationById
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the product translation to retrieve
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieves a specific product translation by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTranslationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a product translation by ID
      tags: *a14
    put:
      operationId: updateProductTranslation
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the product translation to update
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProductTranslationRequestDto"
      responses:
        "200":
          description: Updates an existing product translation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTranslationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update a product translation
      tags: *a14
    delete:
      operationId: deleteProductTranslation
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the product translation to delete
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deletes an existing product translation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTranslationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a product translation
      tags: *a14
info:
  title: Ecom API
  description: The Ecom API description
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    RegisterRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        confirmPassword:
          type: string
          description: Confirm password
          example: securePassword123
          minLength: 8
          maxLength: 20
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        name:
          type: string
          description: The user's name
          example: John Doe
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        code:
          type: string
          description: Verification code
          example: "123456"
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
        - confirmPassword
        - phoneNumber
        - name
        - code
    RegisterResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        name:
          type: string
          description: The user's name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
        createdAt:
          format: date-time
          type: string
          description: The user's created date
          example: 2023-10-27T00:00:00.000Z
        status:
          type: string
          description: The user's status
          example: ACTIVE
          enum:
            - ACTIVE
            - INACTIVE
            - BLOCKED
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        updatedAt:
          format: date-time
          type: string
          description: The user's updated date
          example: 2023-10-27T00:00:00.000Z
      required:
        - id
        - email
        - name
        - phoneNumber
        - createdAt
        - status
        - avatar
        - updatedAt
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        totpCode:
          type: string
          description: The user's TOTP code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
        code:
          type: string
          description: The user's verification code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: The refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - accessToken
        - refreshToken
    RefreshTokenRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token used to obtain new access and refresh tokens
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - refreshToken
    RefreshTokenResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The new access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refreshToken:
          type: string
          description: The new refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - accessToken
        - refreshToken
    LogoutRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token to invalidate
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - refreshToken
    LogoutResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the success of the logout operation
          example: Logout successfully.
      required:
        - message
    SendOTPRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        type:
          type: string
          description: The type of verification code being requested
          enum:
            - REGISTER
            - FORGOT_PASSWORD
            - LOGIN
            - DISABLE_2FA
          example: REGISTER
      required:
        - email
        - type
    SendOTPResponseDto:
      type: object
      properties:
        code:
          type: string
          description: The generated OTP code
          example: "123456"
        createdAt:
          format: date-time
          type: string
          description: The creation timestamp of the OTP code
          example: 2023-10-27T00:00:00.000Z
        expiresAt:
          format: date-time
          type: string
          description: The expiration timestamp of the OTP code
          example: 2023-10-27T00:05:00.000Z
      required:
        - code
        - createdAt
        - expiresAt
    ForgotPasswordRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
        password:
          type: string
          description: The new password for the user
          example: newSecurePassword123
          minLength: 8
          maxLength: 20
        confirmPassword:
          type: string
          description: Confirm the new password
          example: newSecurePassword123
          minLength: 8
          maxLength: 20
        code:
          type: string
          description: The verification code sent to the user's email
          example: "123456"
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
        - confirmPassword
        - code
    ForgotPasswordResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the success of the password update
          example: Password has been updated.
      required:
        - message
    EnableTwoFactorAuthenticationResponseDto:
      type: object
      properties:
        secret:
          type: string
          description: The secret key for 2FA setup
          example: JBSWY3DPEHPK3PXP
        uri:
          type: string
          description: The URI for 2FA setup
          example: otpauth://totp/Example:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=Example
      required:
        - secret
        - uri
    Disable2faRequestDto:
      type: object
      properties:
        totpCode:
          type: string
          description: The user's TOTP code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
        code:
          type: string
          description: The user's verification code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
    Disable2faResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the success of disabling 2FA
          example: 2FA has been disabled.
      required:
        - message
    PaginationResponseDto:
      type: object
      properties:
        totalPages:
          type: number
          description: Total number of pages
          example: 5
        totalItems:
          type: number
          description: Total number of items
          example: 100
        pageSize:
          type: number
          description: Number of items per page
          example: 20
        pageIndex:
          type: number
          description: Current page index (starts from 0)
          example: 0
      required:
        - totalPages
        - totalItems
        - pageSize
        - pageIndex
    PageDto:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/PaginationResponseDto"
      required:
        - pagination
    LanguageResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    LanguageCreateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Language name
          example: English
          minLength: 2
          maxLength: 500
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
          minLength: 2
          maxLength: 2
      required:
        - name
        - id
    LanguageCreateResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    LanguageUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Language name
          example: Vietnamese
          minLength: 2
          maxLength: 500
      required:
        - name
    LanguageUpdateResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    LanguageDeleteResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    RoleResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Role name
          example: Admin
        isActive:
          type: boolean
          description: Is role active
          example: true
        description:
          type: string
          description: Role description
          example: Administrator role
      required:
        - id
        - name
        - isActive
    PermissionWithRolesResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Permission ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Permission name
          example: Create User
        description:
          type: string
          description: Permission description
          example: Allows creating new users
        path:
          type: string
          description: Permission path
          example: /users
        method:
          type: string
          description: Permission method
          example: POST
        module:
          type: string
          description: Permission module
          example: USER
        roles:
          description: Roles associated with the permission
          example:
            - id: 123e4567-e89b-12d3-a456-426614174000
              name: Admin
              description: Administrator role
          type: array
          items:
            $ref: "#/components/schemas/RoleResponseDto"
      required:
        - id
        - name
        - path
        - method
        - module
    CreatePermissionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Permission name
          example: Create User
          minLength: 2
          maxLength: 500
        description:
          type: string
          description: Permission description
          example: Allows creating new users
          maxLength: 1000
        path:
          type: string
          description: Permission path
          example: /users
          minLength: 1
          maxLength: 1000
        method:
          type: string
          description: Permission method
          example: POST
          enum: &a15
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
        rolesIds:
          description: Roles associated with the permission
          example: &a16
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - name
        - path
        - method
        - rolesIds
    UpdatePermissionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Permission name
          example: Create User
          minLength: 2
          maxLength: 500
        description:
          type: string
          description: Permission description
          example: Allows creating new users
          maxLength: 1000
        path:
          type: string
          description: Permission path
          example: /users
          minLength: 1
          maxLength: 1000
        method:
          type: string
          description: Permission method
          example: POST
          enum: *a15
        rolesIds:
          description: Roles associated with the permission
          example: *a16
          type: array
          items:
            type: string
      required:
        - name
        - path
        - method
        - rolesIds
    DeletePermissionRequestDto:
      type: object
      properties:
        isHardDelete:
          type: boolean
          description: Whether to hard delete the permission
          example: false
          default: false
    PermissionResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Permission ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Permission name
          example: Create User
        description:
          type: string
          description: Permission description
          example: Allows creating new users
        path:
          type: string
          description: Permission path
          example: /users
        method:
          type: string
          description: Permission method
          example: POST
        module:
          type: string
          description: Permission module
          example: USER
      required:
        - id
        - name
        - path
        - method
        - module
    RoleWithPermissionsResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Role name
          example: Admin
        isActive:
          type: boolean
          description: Is role active
          example: true
        description:
          type: string
          description: Role description
          example: Administrator role
        permissions:
          description: Permissions associated with the role
          example:
            - id: 123e4567-e89b-12d3-a456-426614174000
              name: Login
              description: Allows user to log in
              path: /login
              method: POST
          type: array
          items:
            $ref: "#/components/schemas/PermissionResponseDto"
      required:
        - id
        - name
        - isActive
        - permissions
    CreateRoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Role name
          example: Admin
        description:
          type: string
          description: Role description
          example: Administrator role
        isActive:
          type: boolean
          description: Is role active
          example: true
        permissionIds:
          description: Permissions
          example:
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - name
    UpdateRoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Role name
          example: Admin
        description:
          type: string
          description: Role description
          example: Administrator role
        isActive:
          type: boolean
          description: Is role active
          example: true
        permissionIds:
          description: Permissions
          example:
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - name
    DeleteRoleRequestDto:
      type: object
      properties:
        isHardDelete:
          type: boolean
          description: Is hard delete
          example: true
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - BLOCKED
      description: The user's status
    ProfileResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: User's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
    UpdateProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: User's full name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        status:
          description: User status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        roleId:
          type: string
          description: Role ID to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    UpdateProfileResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: The user's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleResponseDto"
        updatedAt:
          format: date-time
          type: string
          description: The user's updated date
          example: 2025-05-11T00:00:00.000Z
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
        - updatedAt
    ChangePasswordRequestDto:
      type: object
      properties:
        currentPassword:
          type: string
          description: The user's current password
          example: currentPassword123
          minLength: 8
          maxLength: 20
        newPassword:
          type: string
          description: The user's new password
          example: newPassword123
        newConfirmPassword:
          type: string
          description: The user's new password confirmation
          example: newPassword123
      required:
        - currentPassword
        - newPassword
        - newConfirmPassword
    UserItemResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: The user's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleResponseDto"
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
    CreateUserRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        name:
          type: string
          description: User's full name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        status:
          description: User status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        roleId:
          type: string
          description: Role ID to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - email
        - password
        - name
        - phoneNumber
    CreateUserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: User's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
    UpdateUserRequestDto:
      type: object
      properties:
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        name:
          type: string
          description: User's full name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        status:
          description: User status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        roleId:
          type: string
          description: Role ID to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    UpdateUserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: The user's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleResponseDto"
        updatedAt:
          format: date-time
          type: string
          description: The user's updated date
          example: 2025-05-11T00:00:00.000Z
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
        - updatedAt
    UploadFileResponseDto:
      type: object
      properties:
        url:
          type: string
          description: The URL of the uploaded file
          example: https://bucket-name.s3.region.amazonaws.com/images/profile/avatar.jpg
      required:
        - url
    UploadFilesResponseDto:
      type: object
      properties:
        urls:
          description: Array of URLs of the uploaded files
          example:
            - https://bucket-name.s3.region.amazonaws.com/images/profile/avatar1.jpg
            - https://bucket-name.s3.region.amazonaws.com/images/profile/avatar2.jpg
          type: array
          items:
            type: string
      required:
        - urls
    PresignedUrlResponseDto:
      type: object
      properties:
        url:
          type: string
          description: The generated presigned URL
          example: https://bucket-name.s3.region.amazonaws.com/images/profile/avatar.jpg?X-Amz-Algorithm=...
      required:
        - url
    DeleteFileResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Confirmation message after file deletion
          example: File deleted successfully.
      required:
        - message
    BrandTranslationWithLanguageResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the brand translation
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: Name of the brand in the specified language
          example: Brand Name
        description:
          type: string
          description: Description of the brand in the specified language
          example: This is a brand description.
        language:
          description: Language details for the translation
          allOf:
            - $ref: "#/components/schemas/LanguageResponseDto"
      required:
        - id
        - name
        - description
        - language
    BrandWithBrandTranslationsResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the brand
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        logo:
          type: string
          description: URL to the brand's logo image
          example: https://example.com/logos/brand-logo.png
          format: url
        name:
          type: string
          description: Name of the brand
          example: Brand Name
        brandTranslations:
          description: Translations of the brand in different languages
          type: array
          items:
            $ref: "#/components/schemas/BrandTranslationWithLanguageResponseDto"
      required:
        - id
        - logo
        - name
        - brandTranslations
    BrandIdParamDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the brand
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - id
    CreateBrandRequestDto:
      type: object
      properties:
        logo:
          type: string
          description: URL to the brand's logo image
          example: https://example.com/logos/brand-logo.png
        name:
          type: string
          description: Name of the brand
          example: Brand Name
        brandTranslationIds:
          description: brandTranslationIds
          example: &a17
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - logo
        - name
    CreateBrandResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the brand
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        logo:
          type: string
          description: URL to the brand's logo image
          example: https://example.com/logos/brand-logo.png
          format: url
        name:
          type: string
          description: Name of the brand
          example: Brand Name
        brandTranslations:
          description: Translations of the brand in different languages
          type: array
          items:
            $ref: "#/components/schemas/BrandTranslationWithLanguageResponseDto"
      required:
        - id
        - logo
        - name
        - brandTranslations
    UpdateBrandRequestDto:
      type: object
      properties:
        logo:
          type: string
          description: URL to the brand's logo image
          example: https://example.com/logos/brand-logo.png
        name:
          type: string
          description: Name of the brand
          example: Brand Name
        brandTranslationIds:
          description: brandTranslationIds
          example: *a17
          type: array
          items:
            type: string
    DeleteBrandRequestDto:
      type: object
      properties:
        isHardDelete:
          type: boolean
          description: Whether to hard delete the brand
          example: false
          default: false
    BaseBrandResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the brand
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        logo:
          type: string
          description: URL to the brand's logo image
          example: https://example.com/logos/brand-logo.png
          format: url
        name:
          type: string
          description: Name of the brand
          example: Brand Name
      required:
        - id
        - logo
        - name
    BrandTranslationWithBrandAndLanguageResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the brand translation
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: Name of the brand in the specified language
          example: Brand Name
        description:
          type: string
          description: Description of the brand in the specified language
          example: This is a brand description.
        language:
          description: Language details for the translation
          allOf:
            - $ref: "#/components/schemas/LanguageResponseDto"
        brand:
          description: Brand details for the translation
          nullable: true
          allOf:
            - $ref: "#/components/schemas/BaseBrandResponseDto"
      required:
        - id
        - name
        - description
        - language
    CreateBrandTranslationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the brand translation
          example: Brand Name
        description:
          type: string
          description: Description of the brand translation
          example: This is a brand description.
        languageId:
          type: string
          description: Language code (ISO 639-1)
          example: en
          minLength: 2
          maxLength: 2
        brandId:
          type: string
          description: ID of the brand for which the translation is created
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - name
        - description
        - languageId
        - brandId
    UpdateBrandTranslationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the brand translation
          example: Brand Name
        description:
          type: string
          description: Description of the brand translation
          example: This is a brand description.
        languageId:
          type: string
          description: Language code (ISO 639-1)
          example: en
          minLength: 2
          maxLength: 2
        brandId:
          type: string
          description: ID of the brand for which the translation is created
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    BaseCategoryResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the category
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: Name of the category
          example: Electronics
        logo:
          type: object
          description: URL to the category's logo image
          example: https://example.com/logos/category-logo.png
          format: url
          nullable: true
      required:
        - id
        - name
    CategoryTranslationWithLanguageResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the category translation
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: Name of the category translation in the specified language
          example: Electronics
        description:
          type: string
          description: Description of the category translation in the specified language
          example: This is a category description.
        language:
          description: Language details for the translation
          allOf:
            - $ref: "#/components/schemas/LanguageResponseDto"
      required:
        - id
        - name
        - description
        - language
    CategoryWithChildrenCategoriesResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the category
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: Name of the category
          example: Electronics
        logo:
          type: object
          description: URL to the category's logo image
          example: https://example.com/logos/category-logo.png
          format: url
          nullable: true
        parentCategory:
          description: Parent category details
          nullable: true
          allOf:
            - $ref: "#/components/schemas/BaseCategoryResponseDto"
        categoryTranslations:
          description: Translations of the category in different languages
          type: array
          items:
            $ref: "#/components/schemas/CategoryTranslationWithLanguageResponseDto"
        childrenCategories:
          description: List of child categories
          type: array
          items:
            $ref: "#/components/schemas/BaseCategoryResponseDto"
      required:
        - id
        - name
        - categoryTranslations
        - childrenCategories
    GetAllCategoriesResponseDto:
      type: object
      properties:
        data:
          description: List of all categories with their translations and children
          type: array
          items:
            $ref: "#/components/schemas/CategoryWithChildrenCategoriesResponseDto"
        totalCount:
          type: number
          description: Total number of categories
          example: 100
      required:
        - data
        - totalCount
    CreateCategoryRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the category
          example: Electronics
        logo:
          type: string
          description: URL to the category's logo image
          example: https://example.com/logos/category-logo.png
        categoryTranslationIds:
          description: List of category translation IDs to associate with the category
          example: &a18
            - 123e4567-e89b-12d3-a456-426614174000
          type: array
          items:
            type: string
        parentCategoryId:
          type: string
          description: ID of the parent category
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - name
    UpdateCategoryRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the category
          example: Electronics
        logo:
          type: string
          description: URL to the category's logo image
          example: https://example.com/logos/category-logo.png
        categoryTranslationIds:
          description: List of category translation IDs to associate with the category
          example: *a18
          type: array
          items:
            type: string
        parentCategoryId:
          type: string
          description: ID of the parent category
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    CategoryTranslationWithCategoryAndLanguageResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the category translation
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: Name of the category translation in the specified language
          example: Electronics
        description:
          type: string
          description: Description of the category translation in the specified language
          example: This is a category description.
        language:
          description: Language details for the translation
          allOf:
            - $ref: "#/components/schemas/LanguageResponseDto"
        category:
          description: Category details for the translation
          nullable: true
          allOf:
            - $ref: "#/components/schemas/BaseCategoryResponseDto"
      required:
        - id
        - name
        - description
        - language
    CreateCategoryTranslationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the category translation in the specified language
          example: Electronics
        description:
          type: string
          description: Description of the category translation in the specified language
          example: This is a category description.
        languageId:
          type: string
          description: Language code (ISO 639-1)
          example: en
          minLength: 2
          maxLength: 2
        categoryId:
          type: string
          description: Unique identifier for the category
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - name
        - description
        - languageId
        - categoryId
    UpdateCategoryTranslationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the category translation in the specified language
          example: Electronics
        description:
          type: string
          description: Description of the category translation in the specified language
          example: This is a category description.
        languageId:
          type: string
          description: Language code (ISO 639-1)
          example: en
          minLength: 2
          maxLength: 2
        categoryId:
          type: string
          description: Unique identifier for the category
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    VariantResponseDto:
      type: object
      properties:
        value:
          type: string
          description: Name of the variant
          example: Color
        options:
          description: List of options for the variant
          example:
            - Red
            - Blue
            - Green
          type: array
          items:
            type: string
      required:
        - value
        - options
    ProductTranslationResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the product translation.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The name of the product in the specified language.
          example: Product Name
        description:
          type: string
          description: The description of the product in the specified language.
          example: This is a product description.
        language:
          description: The language of the product translation.
          allOf:
            - $ref: "#/components/schemas/LanguageResponseDto"
      required:
        - id
        - name
        - description
        - language
    ProductResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the product
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        publishedAt:
          type: object
          description: " Publish date of the product"
          example: 2023-10-01T00:00:00Z
          format: date-time
          nullable: true
        name:
          type: string
          description: Name of the product
          example: Sample Product
        basePrice:
          type: number
          description: Base price of the product
          example: 100
        virtualPrice:
          type: number
          description: Virtual price of the product
          example: 90
        images:
          description: Array of product image URLs
          example: &a19
            - https://example.com/image1.jpg
            - https://example.com/image2.png
            - https://example.com/image3.webp
          type: array
          items:
            type: string
        brand:
          description: Brand details associated with the product
          nullable: true
          allOf:
            - $ref: "#/components/schemas/BaseBrandResponseDto"
        variants:
          description: List of variants for the product
          type: array
          items:
            $ref: "#/components/schemas/VariantResponseDto"
        productTranslations:
          description: List of product translations in different languages
          type: array
          items:
            $ref: "#/components/schemas/ProductTranslationResponseDto"
      required:
        - id
        - publishedAt
        - name
        - basePrice
        - virtualPrice
        - images
        - variants
        - productTranslations
    BaseSKUResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the SKU
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        value:
          type: string
          description: SKU value
        price:
          type: number
          description: Price of the SKU
          example: 19.99
        stock:
          type: number
          description: Stock quantity of the SKU
          example: 100
        image:
          type: string
          description: Image URL of the SKU
          example: https://example.com/images/sku-image.png
          format: url
      required:
        - id
        - value
        - price
        - stock
        - image
    ProductDetailResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the product
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        publishedAt:
          type: object
          description: " Publish date of the product"
          example: 2023-10-01T00:00:00Z
          format: date-time
          nullable: true
        name:
          type: string
          description: Name of the product
          example: Sample Product
        basePrice:
          type: number
          description: Base price of the product
          example: 100
        virtualPrice:
          type: number
          description: Virtual price of the product
          example: 90
        images:
          description: Array of product image URLs
          example: *a19
          type: array
          items:
            type: string
        brand:
          description: Brand details associated with the product
          nullable: true
          allOf:
            - $ref: "#/components/schemas/BaseBrandResponseDto"
        variants:
          description: List of variants for the product
          type: array
          items:
            $ref: "#/components/schemas/VariantResponseDto"
        productTranslations:
          description: List of product translations in different languages
          type: array
          items:
            $ref: "#/components/schemas/ProductTranslationResponseDto"
        categories:
          description: " Categories associated with the product"
          type: array
          items:
            $ref: "#/components/schemas/BaseCategoryResponseDto"
        skus:
          description: List of product translations in different languages
          type: array
          items:
            $ref: "#/components/schemas/BaseSKUResponseDto"
      required:
        - id
        - publishedAt
        - name
        - basePrice
        - virtualPrice
        - images
        - variants
        - productTranslations
        - categories
        - skus
    VariantRequestDto:
      type: object
      properties:
        value:
          type: string
          description: Name of the variant
          example: Color
        options:
          description: List of options for the variant
          example:
            - Red
            - Blue
            - Green
          type: array
          items:
            type: string
      required:
        - value
        - options
    UpsertSKURequestDto:
      type: object
      properties:
        value:
          type: string
          description: SKU value
          example: SKU-12345
        price:
          type: number
          description: Price of the SKU
          example: 19.99
        stock:
          type: number
          description: Stock quantity of the SKU
          example: 100
        image:
          type: string
          description: Image URL of the SKU
          example: https://example.com/images/sku-image.png
          format: url
      required:
        - value
        - price
        - stock
        - image
    CreateProductRequestDto:
      type: object
      properties:
        publishedAt:
          format: date-time
          type: string
          description: The date when the product will be published
          example: 2023-10-01T00:00:00Z
          default: 2025-07-10T15:54:38.209Z
        name:
          type: string
          description: The name of the product
          example: Sample Product
        basePrice:
          type: number
          description: Base price of the product
          example: 100
        virtualPrice:
          type: number
          description: Virtual price of the product
          example: 90
        images:
          description: Array of product image URLs
          example: &a20
            - https://example.com/image1.jpg
            - https://example.com/image2.png
            - https://example.com/image3.webp
          type: array
          items:
            type: string
        brandId:
          type: string
          description: ID of the brand associated with the product
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        variants:
          description: List of variants for the product
          type: array
          items:
            $ref: "#/components/schemas/VariantRequestDto"
        categoryIds:
          description: List of category IDs associated with the product
          example: &a21
            - 123e4567-e89b-12d3-a456-426614174000
            - 123e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
        skus:
          description: List of SKUs for the product
          type: array
          items:
            $ref: "#/components/schemas/UpsertSKURequestDto"
      required:
        - name
        - basePrice
        - virtualPrice
        - images
        - brandId
        - variants
        - categoryIds
        - skus
    UpdateProductRequestDto:
      type: object
      properties:
        publishedAt:
          format: date-time
          type: string
          description: The date when the product will be published
          example: 2023-10-01T00:00:00Z
          default: 2025-07-10T15:54:38.209Z
        name:
          type: string
          description: The name of the product
          example: Sample Product
        basePrice:
          type: number
          description: Base price of the product
          example: 100
        virtualPrice:
          type: number
          description: Virtual price of the product
          example: 90
        images:
          description: Array of product image URLs
          example: *a20
          type: array
          items:
            type: string
        brandId:
          type: string
          description: ID of the brand associated with the product
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        categoryIds:
          description: List of category IDs associated with the product
          example: *a21
          type: array
          items:
            type: string
        variants:
          description: List of variants for the product
          type: array
          items:
            $ref: "#/components/schemas/VariantRequestDto"
        skus:
          description: List of SKUs for the product
          type: array
          items:
            $ref: "#/components/schemas/UpsertSKURequestDto"
      required:
        - variants
        - skus
    DeleteProductResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the result of the delete operation
          example: Product deleted successfully
      required:
        - message
    CreateProductTranslationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the product translation.
          example: Product Name
        description:
          type: string
          description: The description of the product translation.
          example: This is a product description.
        languageId:
          type: string
          description: The language code for the product translation.
          example: en
        productId:
          type: string
          description: The unique identifier of the product.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - name
        - description
        - languageId
        - productId
    UpdateProductTranslationRequestDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the product translation.
          example: Product Name
        description:
          type: string
          description: The description of the product translation.
          example: This is a product description.
        languageId:
          type: string
          description: The language code for the product translation.
          example: en
        productId:
          type: string
          description: The unique identifier of the product.
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
