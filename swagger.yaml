openapi: 3.0.0
paths:
  /auth/register:
    post:
      operationId: register
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequestDto"
      responses:
        "200":
          description: Register
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegisterResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Register user
      tags: &a1
        - Auth
  /auth/login:
    post:
      operationId: login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequestDto"
      responses:
        "200":
          description: Login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Login user
      tags: *a1
  /auth/refresh-token:
    post:
      operationId: refreshToken
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequestDto"
      responses:
        "200":
          description: Refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RefreshTokenResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Refresh token
      tags: *a1
  /auth/logout:
    post:
      operationId: logout
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutRequestDto"
      responses:
        "200":
          description: Logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LogoutResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Logout user
      tags: *a1
  /auth/otp:
    post:
      operationId: sendOTP
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendOTPRequestDto"
      responses:
        "200":
          description: Send OTP
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendOTPResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Send OTP
      tags: *a1
  /auth/google/authorization-url:
    get:
      operationId: getAuthorizationUrl
      parameters: []
      responses:
        "200":
          description: Google authorization URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: https://accounts.google.com/o/oauth2/v2/auth?...
      tags: *a1
  /auth/google/callback:
    get:
      operationId: googleCallback
      parameters:
        - name: code
          required: true
          in: query
          schema:
            type: string
        - name: state
          required: true
          in: query
          schema:
            type: string
      responses:
        "200":
          description: ""
      summary: Google callback
      tags: *a1
  /auth/forgot-password:
    post:
      operationId: forgotPassword
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForgotPasswordRequestDto"
      responses:
        "200":
          description: Forgot password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForgotPasswordResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Forgot password
      tags: *a1
  /auth/2fa/enable:
    post:
      operationId: enable2fa
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Enable 2FA
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EnableTwoFactorAuthenticationResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Enable 2FA
      tags: *a1
  /auth/2fa/disable:
    post:
      operationId: disable2fa
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Disable2faRequestDto"
      responses:
        "200":
          description: Disable 2FA
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Disable2faResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Disable 2FA
      tags: *a1
  /languages:
    get:
      operationId: getLanguages
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of languages with pagination.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageListResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a list of languages
      tags: &a2
        - Languages
  /languages/{id}:
    get:
      operationId: getLanguageById
      parameters:
        - name: id
          required: true
          in: path
          description: Language ID
          schema:
            minLength: 2
            maxLength: 2
            example: en
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a specific language by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a language by ID
      tags: *a2
    put:
      operationId: updateLanguage
      parameters:
        - name: id
          required: true
          in: path
          description: Language ID
          schema:
            minLength: 2
            maxLength: 2
            example: en
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageUpdateRequestDto"
      responses:
        "200":
          description: Update an existing language.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageUpdateResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update a language
      tags: *a2
    delete:
      operationId: deleteLanguage
      parameters:
        - name: id
          required: true
          in: path
          description: Language ID
          schema:
            minLength: 2
            maxLength: 2
            example: en
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageDeleteRequestDto"
      responses:
        "200":
          description: Delete a specific language by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageDeleteResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a language
      tags: *a2
  /languages/create:
    post:
      operationId: createLanguage
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageCreateRequestDto"
      responses:
        "200":
          description: Create a new language.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageCreateResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new language
      tags: *a2
  /permissions:
    get:
      operationId: getPermissions
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: ASC
            type: string
            enum:
              - ASC
              - DESC
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: name
            type: string
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of permissions with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/PermissionWithRolesResponseDto"
                    required:
                      - data
      summary: Get a list of permissions
      tags: &a3
        - Permissions
    post:
      operationId: createPermission
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePermissionRequestDto"
      responses:
        "200":
          description: Create a new permission with associated roles.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new permission
      tags: *a3
  /permissions/{id}:
    get:
      operationId: getPermissionById
      parameters:
        - name: id
          required: true
          in: path
          description: Permission ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a specific permission by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a permission by ID
      tags: *a3
    put:
      operationId: updatePermission
      parameters:
        - name: id
          required: true
          in: path
          description: Permission ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePermissionRequestDto"
      responses:
        "200":
          description: Update an existing permission by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update a permission
      tags: *a3
    delete:
      operationId: deletePermission
      parameters:
        - name: id
          required: true
          in: path
          description: Permission ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeletePermissionRequestDto"
      responses:
        "200":
          description: Delete a specific permission by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionWithRolesResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a permission
      tags: *a3
  /roles:
    get:
      operationId: getRoles
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: ASC
            type: string
            enum:
              - ASC
              - DESC
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: name
            type: string
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of roles with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
                    required:
                      - data
      summary: Get a list of roles
      tags: &a4
        - Roles
    post:
      operationId: createRole
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateRoleRequestDto"
      responses:
        "200":
          description: Create a new role with permissions.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new role
      tags: *a4
  /roles/{id}:
    get:
      operationId: getRoleById
      parameters:
        - name: id
          required: true
          in: path
          description: Role ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a role by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a role by ID
      tags: *a4
    put:
      operationId: updateRole
      parameters:
        - name: id
          required: true
          in: path
          description: Role ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRoleRequestDto"
      responses:
        "200":
          description: Update a role by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update an existing role
      tags: *a4
    delete:
      operationId: deleteRole
      parameters:
        - name: id
          required: true
          in: path
          description: Role ID (UUID)
          schema:
            example: 123e4567-e89b-12d3-a456-426614174000
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteRoleRequestDto"
      responses:
        "200":
          description: Delete a role by its ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a role
      tags: *a4
  /profile:
    get:
      operationId: getProfile
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description:
            Retrieves the complete profile information for the authenticated
            user including role and permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get current user profile.
      tags: &a5
        - Profile
    put:
      operationId: updateProfile
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateProfileRequestDto"
      responses:
        "200":
          description:
            Updates the profile information for the authenticated user
            including role and permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateProfileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update current user profile.
      tags: *a5
  /profile/change-password:
    put:
      operationId: changePassword
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangePasswordRequestDto"
      responses:
        "200":
          description: Changes the password for the authenticated user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Change current user password.
      tags: *a5
  /users:
    get:
      operationId: getUsers
      parameters:
        - name: pageSize
          required: false
          in: query
          description: Number of items per page
          schema:
            example: 20
            type: number
        - name: pageIndex
          required: false
          in: query
          description: Page index (starts from 0)
          schema:
            example: 0
            type: number
        - name: order
          required: false
          in: query
          description: Sort order
          schema:
            example: ASC
            type: string
            enum:
              - ASC
              - DESC
        - name: orderBy
          required: false
          in: query
          description: Field to order by
          schema:
            example: name
            type: string
        - name: keyword
          required: false
          in: query
          description: Search keyword
          schema:
            example: admin
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieve a list of users with pagination.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/PageDto"
                  - properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserItemResponseDto"
                    required:
                      - data
      summary: Get a list of users
      tags: &a6
        - Users
    post:
      operationId: createUser
      parameters:
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequestDto"
      responses:
        "200":
          description: Creates a new user with the provided details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateUserResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Create a new user.
      tags: *a6
  /users/{id}:
    get:
      operationId: getUserById
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the user to retrieve
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Retrieves a specific user by their ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserItemResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Get a user by ID
      tags: *a6
    put:
      operationId: updateUser
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the user to update
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequestDto"
      responses:
        "200":
          description: Updates the details of an existing user by ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateUserResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Update an existing user.
      tags: *a6
    delete:
      operationId: deleteUser
      parameters:
        - name: id
          required: true
          in: path
          description: ID of the user to delete
          schema:
            type: string
        - name: Authorization
          in: header
          description: Bearer auth token
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Deletes a user by their ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserItemResponseDto"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                example:
                  statusCode: 400
                  message:
                    - field: field
                      message: message
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                example:
                  statusCode: 401
                  message: Unauthorized.
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                example:
                  statusCode: 403
                  message: Forbidden.
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                example:
                  statusCode: 404
                  message: Not Found.
        "422":
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                example:
                  statusCode: 422
                  message: Unprocessable content.
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                example:
                  statusCode: 500
                  message: Internal server error.
      summary: Delete a user by ID
      tags: *a6
info:
  title: Ecom API
  description: The Ecom API description
  version: "1.0"
  contact: {}
tags: []
servers: []
components:
  schemas:
    RegisterRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        confirmPassword:
          type: string
          description: Confirm password
          example: securePassword123
          minLength: 8
          maxLength: 20
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        name:
          type: string
          description: The user's name
          example: John Doe
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        code:
          type: string
          description: Verification code
          example: "123456"
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
        - confirmPassword
        - phoneNumber
        - name
        - code
    RegisterResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        name:
          type: string
          description: The user's name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
        createdAt:
          format: date-time
          type: string
          description: The user's created date
          example: 2023-10-27T00:00:00.000Z
        status:
          type: string
          description: The user's status
          example: ACTIVE
          enum:
            - ACTIVE
            - INACTIVE
            - BLOCKED
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        updatedAt:
          format: date-time
          type: string
          description: The user's updated date
          example: 2023-10-27T00:00:00.000Z
      required:
        - id
        - email
        - name
        - phoneNumber
        - createdAt
        - status
        - avatar
        - updatedAt
    LoginRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        totpCode:
          type: string
          description: The user's TOTP code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
        code:
          type: string
          description: The user's verification code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
    LoginResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: The refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - accessToken
        - refreshToken
    RefreshTokenRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token used to obtain new access and refresh tokens
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - refreshToken
    RefreshTokenResponseDto:
      type: object
      properties:
        accessToken:
          type: string
          description: The new access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        refreshToken:
          type: string
          description: The new refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - accessToken
        - refreshToken
    LogoutRequestDto:
      type: object
      properties:
        refreshToken:
          type: string
          description: The refresh token to invalidate
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
      required:
        - refreshToken
    LogoutResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the success of the logout operation
          example: Logout successfully.
      required:
        - message
    SendOTPRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        type:
          type: string
          description: The type of verification code being requested
          enum:
            - REGISTER
            - FORGOT_PASSWORD
            - LOGIN
            - DISABLE_2FA
          example: REGISTER
      required:
        - email
        - type
    SendOTPResponseDto:
      type: object
      properties:
        code:
          type: string
          description: The generated OTP code
          example: "123456"
        createdAt:
          format: date-time
          type: string
          description: The creation timestamp of the OTP code
          example: 2023-10-27T00:00:00.000Z
        expiresAt:
          format: date-time
          type: string
          description: The expiration timestamp of the OTP code
          example: 2023-10-27T00:05:00.000Z
      required:
        - code
        - createdAt
        - expiresAt
    ForgotPasswordRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
        password:
          type: string
          description: The new password for the user
          example: newSecurePassword123
          minLength: 8
          maxLength: 20
        confirmPassword:
          type: string
          description: Confirm the new password
          example: newSecurePassword123
          minLength: 8
          maxLength: 20
        code:
          type: string
          description: The verification code sent to the user's email
          example: "123456"
          minLength: 6
          maxLength: 6
      required:
        - email
        - password
        - confirmPassword
        - code
    ForgotPasswordResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the success of the password update
          example: Password has been updated.
      required:
        - message
    EnableTwoFactorAuthenticationResponseDto:
      type: object
      properties:
        secret:
          type: string
          description: The secret key for 2FA setup
          example: JBSWY3DPEHPK3PXP
        uri:
          type: string
          description: The URI for 2FA setup
          example: otpauth://totp/Example:user@example.com?secret=JBSWY3DPEHPK3PXP&issuer=Example
      required:
        - secret
        - uri
    Disable2faRequestDto:
      type: object
      properties:
        totpCode:
          type: string
          description: The user's TOTP code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
        code:
          type: string
          description: The user's verification code (if 2FA is enabled)
          example: "123456"
          minLength: 6
          maxLength: 6
    Disable2faResponseDto:
      type: object
      properties:
        message:
          type: string
          description: Message indicating the success of disabling 2FA
          example: 2FA has been disabled.
      required:
        - message
    LanguageResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    LanguageListResponseDto:
      type: object
      properties:
        languages:
          description: List of languages
          type: array
          items:
            $ref: "#/components/schemas/LanguageResponseDto"
        total:
          type: number
          description: Total number of languages
          example: 10
      required:
        - languages
        - total
    LanguageCreateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Language name
          example: English
          minLength: 2
          maxLength: 500
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
          minLength: 2
          maxLength: 2
      required:
        - name
        - id
    LanguageCreateResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    LanguageUpdateRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Language name
          example: Vietnamese
          minLength: 2
          maxLength: 500
      required:
        - name
    LanguageUpdateResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    LanguageDeleteRequestDto:
      type: object
      properties:
        isHardDelete:
          type: boolean
          description: Whether to hard delete the language
          example: false
          default: false
    LanguageDeleteResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Language code (ISO 639-1)
          example: en
        name:
          type: string
          description: Language name
          example: English
      required:
        - id
        - name
    PaginationResponseDto:
      type: object
      properties:
        totalPages:
          type: number
          description: Total number of pages
          example: 5
        totalItems:
          type: number
          description: Total number of items
          example: 100
        pageSize:
          type: number
          description: Number of items per page
          example: 20
        pageIndex:
          type: number
          description: Current page index (starts from 0)
          example: 0
      required:
        - totalPages
        - totalItems
        - pageSize
        - pageIndex
    PageDto:
      type: object
      properties:
        pagination:
          $ref: "#/components/schemas/PaginationResponseDto"
      required:
        - pagination
    RoleResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Role name
          example: Admin
        isActive:
          type: boolean
          description: Is role active
          example: true
        description:
          type: string
          description: Role description
          example: Administrator role
      required:
        - id
        - name
        - isActive
    PermissionWithRolesResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Permission ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Permission name
          example: Create User
        description:
          type: string
          description: Permission description
          example: Allows creating new users
        path:
          type: string
          description: Permission path
          example: /users
        method:
          type: string
          description: Permission method
          example: POST
        module:
          type: string
          description: Permission module
          example: USER
        roles:
          description: Roles associated with the permission
          example:
            - id: 123e4567-e89b-12d3-a456-426614174000
              name: Admin
              description: Administrator role
          type: array
          items:
            $ref: "#/components/schemas/RoleResponseDto"
      required:
        - id
        - name
        - path
        - method
        - module
    CreatePermissionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Permission name
          example: Create User
          minLength: 2
          maxLength: 500
        description:
          type: string
          description: Permission description
          example: Allows creating new users
          maxLength: 1000
        path:
          type: string
          description: Permission path
          example: /users
          minLength: 1
          maxLength: 1000
        method:
          type: string
          description: Permission method
          example: POST
          enum: &a7
            - GET
            - POST
            - PUT
            - DELETE
            - PATCH
        roles:
          description: Roles associated with the permission
          example: &a8
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - name
        - path
        - method
        - roles
    UpdatePermissionRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Permission name
          example: Create User
          minLength: 2
          maxLength: 500
        description:
          type: string
          description: Permission description
          example: Allows creating new users
          maxLength: 1000
        path:
          type: string
          description: Permission path
          example: /users
          minLength: 1
          maxLength: 1000
        method:
          type: string
          description: Permission method
          example: POST
          enum: *a7
        roles:
          description: Roles associated with the permission
          example: *a8
          type: array
          items:
            type: string
      required:
        - name
        - path
        - method
        - roles
    DeletePermissionRequestDto:
      type: object
      properties:
        isHardDelete:
          type: boolean
          description: Whether to hard delete the permission
          example: false
          default: false
    PermissionResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Permission ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Permission name
          example: Create User
        description:
          type: string
          description: Permission description
          example: Allows creating new users
        path:
          type: string
          description: Permission path
          example: /users
        method:
          type: string
          description: Permission method
          example: POST
        module:
          type: string
          description: Permission module
          example: USER
      required:
        - id
        - name
        - path
        - method
        - module
    RoleWithPermissionsResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Role ID
          example: 123e4567-e89b-12d3-a456-426614174000
        name:
          type: string
          description: Role name
          example: Admin
        isActive:
          type: boolean
          description: Is role active
          example: true
        description:
          type: string
          description: Role description
          example: Administrator role
        permissions:
          description: Permissions associated with the role
          example:
            - id: 123e4567-e89b-12d3-a456-426614174000
              name: Login
              description: Allows user to log in
              path: /login
              method: POST
          type: array
          items:
            $ref: "#/components/schemas/PermissionResponseDto"
      required:
        - id
        - name
        - isActive
        - permissions
    CreateRoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Role name
          example: Admin
        description:
          type: string
          description: Role description
          example: Administrator role
        isActive:
          type: boolean
          description: Is role active
          example: true
        permissions:
          description: Permissions
          example:
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - name
    UpdateRoleRequestDto:
      type: object
      properties:
        name:
          type: string
          description: Role name
          example: Admin
        description:
          type: string
          description: Role description
          example: Administrator role
        isActive:
          type: boolean
          description: Is role active
          example: true
        permissions:
          description: Permissions
          example:
            - 123e4567-e89b-12d3-a456-426614174000
            - 223e4567-e89b-12d3-a456-426614174001
          type: array
          items:
            type: string
      required:
        - name
    DeleteRoleRequestDto:
      type: object
      properties:
        isHardDelete:
          type: boolean
          description: Is hard delete
          example: true
    UserStatus:
      type: string
      enum:
        - ACTIVE
        - INACTIVE
        - BLOCKED
      description: The user's status
    ProfileResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: User's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
    UpdateProfileRequestDto:
      type: object
      properties:
        name:
          type: string
          description: User's full name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        status:
          description: User status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        roleId:
          type: string
          description: Role ID to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    UpdateProfileResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: The user's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleResponseDto"
        updatedAt:
          format: date-time
          type: string
          description: The user's updated date
          example: 2025-05-11T00:00:00.000Z
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
        - updatedAt
    ChangePasswordRequestDto:
      type: object
      properties:
        currentPassword:
          type: string
          description: The user's current password
          example: currentPassword123
          minLength: 8
          maxLength: 20
        newPassword:
          type: string
          description: The user's new password
          example: newPassword123
        newConfirmPassword:
          type: string
          description: The user's new password confirmation
          example: newPassword123
      required:
        - currentPassword
        - newPassword
        - newConfirmPassword
    UserItemResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: The user's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleResponseDto"
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
    CreateUserRequestDto:
      type: object
      properties:
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        name:
          type: string
          description: User's full name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        status:
          description: User status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        roleId:
          type: string
          description: Role ID to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
      required:
        - email
        - password
        - name
        - phoneNumber
    CreateUserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: User's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleWithPermissionsResponseDto"
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
    UpdateUserRequestDto:
      type: object
      properties:
        password:
          type: string
          description: The user's password
          example: securePassword123
          minLength: 8
          maxLength: 20
        name:
          type: string
          description: User's full name
          example: John Doe
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
        status:
          description: User status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        roleId:
          type: string
          description: Role ID to assign to the user
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
    UpdateUserResponseDto:
      type: object
      properties:
        id:
          type: string
          description: The user's ID
          example: 123e4567-e89b-12d3-a456-426614174000
          format: uuid
        name:
          type: string
          description: The user's name
          example: John Doe
        email:
          type: string
          description: The user's email address
          example: user@example.com
          format: email
        phoneNumber:
          type: string
          description: The user's phone number
          example: "0987654321"
          minLength: 10
          maxLength: 11
        avatar:
          type: string
          description: URL to user's avatar image
          example: https://example.com/avatars/johndoe.jpg
          nullable: true
        status:
          description: The user's status
          example: ACTIVE
          allOf:
            - $ref: "#/components/schemas/UserStatus"
        role:
          description: The user's role with associated permissions
          allOf:
            - $ref: "#/components/schemas/RoleResponseDto"
        updatedAt:
          format: date-time
          type: string
          description: The user's updated date
          example: 2025-05-11T00:00:00.000Z
      required:
        - id
        - name
        - email
        - phoneNumber
        - avatar
        - status
        - role
        - updatedAt
